{
  "version": 3,
  "sources": ["src/PushProcessor.ts"],
  "sourcesContent": ["import createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';\nimport memoize from '@hilla/generator-typescript-utils/memoize.js';\nimport ts from 'typescript';\n\nconst initParameterTypeName = 'EndpointRequestInit';\n\nexport type EndpointOperations = {\n  methodsToPatch: string[];\n  removeInitImport: boolean;\n};\n\nexport class PushProcessor {\n  readonly #dependencies = new DependencyManager(new PathManager({ extension: '.js' }));\n  readonly #operations: EndpointOperations;\n  readonly #source: ts.SourceFile;\n  readonly #subscriptionId: () => ts.Identifier;\n\n  constructor(source: ts.SourceFile, operations: EndpointOperations) {\n    this.#operations = operations;\n    this.#source = source;\n\n    const { imports, paths } = this.#dependencies;\n\n    this.#dependencies.imports.fromCode(source);\n    this.#subscriptionId = memoize(() =>\n      imports.named.add(paths.createBareModulePath('@hilla/frontend', false), 'Subscription'),\n    );\n  }\n\n  process(): ts.SourceFile {\n    const otherStatements = this.#source.statements\n      .filter((statement) => !ts.isImportDeclaration(statement))\n      .map((statement) => {\n        if (ts.isFunctionDeclaration(statement)) {\n          const functionName = statement.name?.text;\n\n          // Checks if the method is in the list of methods to patch\n          if (functionName && this.#operations.methodsToPatch.includes(functionName)) {\n            return this.#updateFunction(statement);\n          }\n        }\n\n        return statement;\n      });\n\n    let importStatements = this.#dependencies.imports.toCode();\n\n    if (this.#operations.removeInitImport) {\n      const importHillaFrontend = importStatements.find(\n        (statement) =>\n          ts.isImportDeclaration(statement) &&\n          (statement.moduleSpecifier as ts.StringLiteral).text === '@hilla/frontend',\n      );\n\n      if (importHillaFrontend) {\n        const updatedImportStatement = this.#removeInitImport(importHillaFrontend as ts.ImportDeclaration);\n\n        if (updatedImportStatement) {\n          importStatements = importStatements.map((statement) => {\n            if (statement === importHillaFrontend) {\n              return updatedImportStatement;\n            }\n\n            return statement;\n          });\n        }\n      }\n    }\n\n    const updatedStatements: readonly ts.Statement[] = [...importStatements, ...otherStatements];\n\n    return createSourceFile(updatedStatements, this.#source.fileName);\n  }\n\n  #doesInitParameterExist(parameters: ts.NodeArray<ts.ParameterDeclaration>): boolean {\n    const last = parameters[parameters.length - 1];\n    const lastType = last.type as ts.TypeReferenceNode;\n    const lastTypeName = lastType.typeName as ts.Identifier;\n\n    return lastTypeName.text === initParameterTypeName;\n  }\n\n  #removeInitImport(importStatement: ts.ImportDeclaration): ts.Statement | undefined {\n    const namedImports = importStatement.importClause?.namedBindings;\n    if (namedImports && ts.isNamedImports(namedImports)) {\n      const updatedElements = namedImports.elements.filter((element) => element.name.text !== 'EndpointRequestInit');\n\n      const updatedImportClause = ts.factory.updateImportClause(\n        importStatement.importClause,\n        false, // FIXME: could be true, but it is false for regular endpoint calls, so sticking to that for now\n        undefined,\n        ts.factory.createNamedImports(updatedElements),\n      );\n\n      return ts.factory.updateImportDeclaration(\n        importStatement,\n        undefined,\n        updatedImportClause,\n        importStatement.moduleSpecifier,\n        undefined,\n      );\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Replace returned `Promise<Array<T>>` by the `Subscription<T>` type\n   * @param declaration -\n   */\n  #replacePromiseType(declaration: ts.FunctionDeclaration) {\n    const promiseType = (declaration.type as ts.TypeReferenceNode).typeArguments![0];\n    const promiseArray = (ts.isUnionTypeNode(promiseType) ? promiseType.types[0] : promiseType) as ts.TypeReferenceNode;\n\n    return ts.factory.createTypeReferenceNode(this.#subscriptionId(), promiseArray.typeArguments);\n  }\n\n  #updateFunction(declaration: ts.FunctionDeclaration): ts.FunctionDeclaration {\n    const { parameters } = declaration;\n    const doesInitParameterExist = this.#doesInitParameterExist(parameters);\n\n    return ts.factory.createFunctionDeclaration(\n      undefined, // no async\n      declaration.asteriskToken,\n      declaration.name,\n      declaration.typeParameters,\n      // Remove the `init` parameter\n      doesInitParameterExist ? parameters.slice(0, -1) : parameters,\n      this.#replacePromiseType(declaration),\n      this.#updateFunctionBody(declaration, doesInitParameterExist),\n    );\n  }\n\n  #updateFunctionBody(declaration: ts.FunctionDeclaration, doesInitParameterExist: boolean): ts.Block {\n    const returnStatement = declaration.body!.statements[0] as ts.ReturnStatement;\n    const { arguments: args, expression, typeArguments } = returnStatement.expression! as ts.CallExpression;\n    const call = expression as ts.PropertyAccessExpression;\n\n    return ts.factory.createBlock([\n      ts.factory.createReturnStatement(\n        ts.factory.createCallExpression(\n          ts.factory.createPropertyAccessExpression(\n            call.expression,\n            // `subscribe` instead of `call`\n            ts.factory.createIdentifier('subscribe'),\n          ),\n          typeArguments,\n          // remove the `init` parameter\n          doesInitParameterExist ? args.slice(0, -1) : args,\n        ),\n      ),\n    ]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
