{
  "version": 3,
  "sources": ["src/Validators.ts"],
  "sourcesContent": ["import isAfter from 'validator/es/lib/isAfter.js';\nimport isBefore from 'validator/es/lib/isBefore.js';\nimport isBoolean from 'validator/es/lib/isBoolean.js';\nimport isDecimal from 'validator/es/lib/isDecimal.js';\nimport isEmail from 'validator/es/lib/isEmail.js';\nimport isFloat from 'validator/es/lib/isFloat.js';\nimport isLength from 'validator/es/lib/isLength.js';\nimport isNumeric from 'validator/es/lib/isNumeric.js';\nimport matches from 'validator/es/lib/matches.js';\nimport toFloat from 'validator/es/lib/toFloat.js';\nimport type { Validator } from './Validation.js';\n\ninterface ValidatorAttributes {\n  message?: string;\n}\ninterface ValueNumberAttributes extends ValidatorAttributes {\n  value: number | string;\n}\ninterface DigitAttributes extends ValidatorAttributes {\n  integer: number;\n  fraction: number;\n}\ninterface SizeAttributes extends ValidatorAttributes {\n  min?: number;\n  max?: number;\n}\ninterface PatternAttributes extends ValidatorAttributes {\n  regexp: RegExp | string;\n}\ninterface DecimalAttributes extends ValueNumberAttributes {\n  inclusive?: boolean;\n}\n\nabstract class AbstractValidator<T> implements Validator<T> {\n  message = 'invalid';\n\n  impliesRequired = false;\n\n  constructor(attrs?: ValidatorAttributes) {\n    if (attrs?.message) {\n      this.message = attrs.message;\n    }\n  }\n\n  abstract validate(value: T): Promise<boolean> | boolean;\n  abstract get name(): string;\n}\n\nexport class Required<T> extends AbstractValidator<T> {\n  override impliesRequired = true;\n\n  override validate(value: T): boolean {\n    if (typeof value === 'string' || Array.isArray(value)) {\n      return value.length > 0;\n    }\n    if (typeof value === 'number') {\n      return Number.isFinite(value);\n    }\n    return value !== undefined;\n  }\n\n  readonly name: string = 'Required';\n}\n\nfunction _asValidatorAttributes(attrs: PatternAttributes | RegExp | ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs : {};\n}\n\nfunction _value(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs.value : attrs;\n}\n\nabstract class NumberValidator<T> extends AbstractValidator<T> {\n  override validate(value: T) {\n    return isNumeric(String(value));\n  }\n}\n\nexport class IsNumber extends NumberValidator<number | null | undefined> {\n  optional: boolean;\n\n  constructor(optional: boolean, attrs?: ValidatorAttributes) {\n    super({ message: 'must be a number', ...attrs });\n    this.optional = optional;\n  }\n\n  override validate(value: number | null | undefined): boolean {\n    return (this.optional && value == null) || super.validate(value);\n  }\n\n  readonly name = 'IsNumber';\n}\n\nabstract class ValueNumberValidator<T> extends NumberValidator<T> {\n  value: number;\n\n  protected constructor(attrs: ValueNumberAttributes | number | string) {\n    super(_asValidatorAttributes(attrs));\n    const val = _value(attrs);\n    this.value = typeof val === 'string' ? parseFloat(val) : val;\n  }\n}\n\n// JSR380 equivalent (https://beanvalidation.org/2.0/spec/#builtinconstraints)\nexport class Email extends AbstractValidator<string> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a well-formed email address', ...attrs });\n  }\n\n  override validate(value: string | null | undefined): boolean {\n    return !value || isEmail(value);\n  }\n\n  readonly name = 'Email';\n}\n\nexport class Null extends AbstractValidator<any> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be null', ...attrs });\n  }\n\n  override validate(value: any): boolean {\n    return value == null;\n  }\n\n  readonly name = 'Null';\n}\n\nexport class NotNull<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be null', ...attrs });\n  }\n\n  override validate(value: T): value is NonNullable<T> {\n    return !new Null().validate(value);\n  }\n\n  override readonly name = 'NotNull';\n}\n\nexport class NotEmpty<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be empty', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return (\n      super.validate(value) && new NotNull<T>().validate(value) && ((value as { length?: number }).length ?? 0) > 0\n    );\n  }\n\n  override readonly name = 'NotEmpty';\n}\n\nexport class NotBlank<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be blank', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && new NotNull<T>().validate(value) && String(value).trim().length > 0;\n  }\n\n  override readonly name = 'NotBlank';\n}\n\nexport class AssertTrue<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be true', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isBoolean(String(value)) && String(value) === 'true';\n  }\n\n  readonly name = 'AssertTrue';\n}\n\nexport class AssertFalse<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be false', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return !new AssertTrue<T>().validate(value);\n  }\n\n  readonly name = 'AssertFalse';\n}\n\nfunction _asValueNumberAttributes(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs : { value: attrs };\n}\n\nexport class Min<T> extends ValueNumberValidator<T> {\n  constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be greater than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { min: this.value });\n  }\n\n  readonly name = 'Min';\n}\n\nexport class Max<T> extends ValueNumberValidator<T> {\n  constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be less than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { max: this.value });\n  }\n\n  readonly name = 'Max';\n}\n\nfunction _inclusive(attrs: DecimalAttributes | number | string) {\n  return typeof attrs !== 'object' || attrs.inclusive !== false;\n}\n\nexport class DecimalMin<T> extends ValueNumberValidator<T> {\n  inclusive: boolean;\n\n  constructor(attrs: DecimalAttributes | number | string) {\n    super({\n      message: `must be greater than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'min' : 'gt']: this.value });\n  }\n\n  readonly name = 'DecimalMin';\n}\n\nexport class DecimalMax<T> extends ValueNumberValidator<T> {\n  inclusive: boolean;\n\n  constructor(attrs: DecimalAttributes | number | string) {\n    super({\n      message: `must be less than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'max' : 'lt']: this.value });\n  }\n\n  readonly name = 'DecimalMax';\n}\n\nexport class Negative<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return toFloat(String(value)) < 0;\n  }\n\n  readonly name = 'Negative';\n}\n\nexport class NegativeOrZero<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than or equal to 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return toFloat(String(value)) <= 0;\n  }\n\n  readonly name = 'NegativeOrZero';\n}\n\nexport class Positive<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return toFloat(String(value)) > 0;\n  }\n\n  readonly name = 'Positive';\n}\n\nexport class PositiveOrZero<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than or equal to 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return toFloat(String(value)) >= 0;\n  }\n\n  readonly name = 'PositiveOrZero';\n}\n\nfunction _min(attrs: SizeAttributes) {\n  return attrs.min ?? 0;\n}\n\nfunction _max(attrs: SizeAttributes) {\n  return attrs.max ?? Number.MAX_SAFE_INTEGER;\n}\n\nexport class Size extends AbstractValidator<string> {\n  min: number;\n  max: number;\n\n  constructor(attrs: SizeAttributes = {}) {\n    super({ message: `size must be between ${_min(attrs)} and ${_max(attrs)}`, ...attrs });\n    this.min = _min(attrs);\n    this.max = _max(attrs);\n    if (this.min > 0) {\n      this.impliesRequired = true;\n    }\n  }\n\n  override validate(value: string): boolean {\n    if (this.min && this.min > 0 && !new Required().validate(value)) {\n      return false;\n    }\n    // eslint-disable-next-line sort-keys\n    return isLength(value, { min: this.min, max: this.max });\n  }\n\n  readonly name = 'Size';\n}\n\nexport class Digits<T> extends AbstractValidator<T> {\n  integer: number;\n  fraction: number;\n\n  constructor(attrs: DigitAttributes) {\n    super({\n      message: `numeric value out of bounds (<${attrs.integer} digits>.<${attrs.fraction} digits> expected)`,\n      ...attrs,\n    });\n    this.integer = attrs.integer;\n    this.fraction = attrs.fraction;\n  }\n\n  override validate(value: T): boolean {\n    return (\n      String(Math.floor(Math.abs(toFloat(String(value))))).length <= this.integer &&\n      // eslint-disable-next-line camelcase\n      isDecimal(String(value), { decimal_digits: `0,${this.fraction}` })\n    );\n  }\n\n  readonly name = 'Digits';\n}\n\nexport class Past<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a past date', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isBefore(String(value));\n  }\n\n  readonly name = 'Past';\n}\n\n/*\n  @PastOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class PastOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the past or in the present', ...attrs });\n//   }\n//   validate() {\n//     return true;\n//   }\n// }\n\nexport class Future<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a future date', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isAfter(String(value));\n  }\n\n  readonly name = 'Future';\n}\n\n/*\n  @FutureOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class FutureOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the present or in the future', ...attrs });\n//   }\n//   validate = () => true;\n// }\n\nfunction _regexp(attrs: PatternAttributes | RegExp | string) {\n  if (typeof attrs === 'string') {\n    return new RegExp(attrs, 'u');\n  }\n\n  if (attrs instanceof RegExp) {\n    return attrs;\n  }\n\n  if (typeof attrs.regexp === 'string') {\n    return new RegExp(attrs.regexp, 'u');\n  }\n\n  return attrs.regexp;\n}\n\nexport class Pattern extends AbstractValidator<string> {\n  regexp: RegExp;\n\n  constructor(attrs: PatternAttributes | RegExp | string) {\n    super({\n      message: `must match the following regular expression: ${_regexp(attrs).toString()}`,\n      ..._asValidatorAttributes(attrs),\n    });\n    this.regexp = _regexp(attrs);\n  }\n\n  override validate(value: any): boolean {\n    return matches(value, this.regexp);\n  }\n\n  readonly name = 'Pattern';\n}\n\n/**\n * Validator that reports an error when the bound HTML element validation\n * returns false from `element.checkValidity()` and `element.validity.valid`.\n */\nexport class ValidityStateValidator<T> extends AbstractValidator<T> {\n  override message = '';\n\n  // eslint-disable-next-line no-useless-constructor,@typescript-eslint/no-useless-constructor\n  constructor() {\n    super();\n  }\n\n  override validate(): boolean {\n    return false;\n  }\n\n  readonly name = 'ValidityStateValidator';\n}\n"],
  "mappings": "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",
  "names": []
}
