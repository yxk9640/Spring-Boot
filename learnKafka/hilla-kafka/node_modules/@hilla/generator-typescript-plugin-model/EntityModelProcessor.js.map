{
  "version": 3,
  "sources": ["src/EntityModelProcessor.ts"],
  "sourcesContent": ["/* eslint-disable symbol-description */\nimport { dirname } from 'path/posix';\nimport {\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  decomposeSchema,\n  isComposedSchema,\n  isEmptyObject,\n  isEnumSchema,\n  isObjectSchema,\n  isReferenceSchema,\n  type ObjectSchema,\n  type ReferenceSchema,\n  type Schema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport {\n  convertFullyQualifiedNameToRelativePath,\n  simplifyFullyQualifiedName,\n} from '@hilla/generator-typescript-core/utils.js';\nimport createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';\nimport ts, {\n  type ClassDeclaration,\n  type ClassElement,\n  type Identifier,\n  type SourceFile,\n  type Statement,\n} from 'typescript';\nimport { ModelSchemaExpressionProcessor, ModelSchemaTypeProcessor } from './ModelSchemaProcessor.js';\nimport { importBuiltInFormModel, type Context, createModelBuildingCallback, createEmptyValueMaker } from './utils.js';\n\nexport type DependencyData = Readonly<{\n  id: Identifier;\n  path: string;\n}>;\n\nconst $dependencies = Symbol();\nconst $entity = Symbol();\nconst $fullyQualifiedName = Symbol();\nconst $model = Symbol();\nconst $processDeclaration = Symbol();\n\nexport abstract class EntityModelProcessor {\n  static process(name: string, component: Schema, context: Context): SourceFile {\n    context.owner.logger.debug(`Processing model for entity: ${name}`);\n\n    const schema = isComposedSchema(component) ? decomposeSchema(component)[0] : component;\n\n    return isEnumSchema(schema)\n      ? // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new EntityEnumModelProcessor(name).process() // eslint-disable-line no-use-before-define\n      : // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new EntityClassModelProcessor(name, component, context).process(); // eslint-disable-line no-use-before-define\n  }\n\n  protected readonly [$dependencies]: DependencyManager;\n  protected readonly [$entity]: DependencyData;\n  protected readonly [$fullyQualifiedName]: string;\n  protected readonly [$model]: DependencyData;\n  readonly #outputPathManager = new PathManager({ extension: 'ts' });\n\n  protected constructor(name: string, shouldImportEntityAsType: boolean) {\n    this[$fullyQualifiedName] = name;\n\n    const entityName = simplifyFullyQualifiedName(name);\n    const entityPath = convertFullyQualifiedNameToRelativePath(name);\n\n    const modelName = `${entityName}Model`;\n    const modelPath = `${entityPath}Model`;\n    this[$dependencies] = new DependencyManager(new PathManager({ extension: '.js', relativeTo: dirname(modelPath) }));\n\n    const { exports, imports, paths } = this[$dependencies];\n\n    this[$model] = {\n      id: exports.default.set(modelName),\n      path: modelPath,\n    };\n\n    this[$entity] = {\n      id: imports.default.add(paths.createRelativePath(entityPath), entityName, shouldImportEntityAsType),\n      path: entityPath,\n    };\n  }\n\n  process(): SourceFile {\n    const declaration = this[$processDeclaration]();\n\n    const { exports, imports } = this[$dependencies];\n    const importStatements = imports.toCode();\n    const exportStatement = exports.toCode();\n\n    return createSourceFile(\n      [...importStatements, declaration, ...exportStatement].filter(Boolean) as readonly Statement[],\n      this.#outputPathManager.createRelativePath(this[$model].path),\n    );\n  }\n\n  protected abstract [$processDeclaration](): ClassDeclaration | undefined;\n}\n\nexport class EntityClassModelProcessor extends EntityModelProcessor {\n  readonly #component: Schema;\n  readonly #context: Context;\n  readonly #fullyQualifiedName: string;\n  readonly #getPropertyModelSymbol: Identifier;\n  readonly #makeObjectEmptyValueCreator: Identifier;\n\n  constructor(name: string, component: Schema, context: Context) {\n    super(name, true);\n\n    this.#component = component;\n    this.#context = context;\n    this.#fullyQualifiedName = name;\n\n    this.#getPropertyModelSymbol = this[$dependencies].imports.named.add('@hilla/form', '_getPropertyModel');\n    this.#makeObjectEmptyValueCreator = this[$dependencies].imports.named.add(\n      '@hilla/form',\n      'makeObjectEmptyValueCreator',\n    );\n  }\n\n  protected [$processDeclaration](): ClassDeclaration | undefined {\n    const { logger } = this.#context.owner;\n\n    let entitySchema = this.#component;\n    let parent;\n\n    if (isComposedSchema(this.#component)) {\n      const decomposed = decomposeSchema(this.#component);\n\n      if (decomposed.length > 2) {\n        logger.debug(\n          this.#component,\n          `The schema for a class component ${\n            this.#fullyQualifiedName\n          } has more than two components. This plugin will ignore it.`,\n        );\n        return undefined;\n      }\n\n      const [parentSchema, childSchema] = decomposed;\n\n      if (!isReferenceSchema(parentSchema)) {\n        logger.debug(parentSchema, 'Only reference schema allowed for parent class');\n        return undefined;\n      }\n\n      entitySchema = childSchema;\n      parent = this.#processParentClass(parentSchema);\n    } else {\n      parent = importBuiltInFormModel('ObjectModel', this[$dependencies]);\n    }\n\n    return this.#processModelClass(entitySchema, this[$entity].id, parent);\n  }\n\n  #processClassElements({ properties }: ObjectSchema): readonly ClassElement[] {\n    if (!properties) {\n      return [];\n    }\n\n    return Object.entries(properties).map(([name, schema]) => {\n      const type = new ModelSchemaTypeProcessor(schema, this[$dependencies]).process();\n      const args = new ModelSchemaExpressionProcessor(schema, this[$dependencies]).process();\n\n      return ts.factory.createGetAccessorDeclaration(\n        undefined,\n        ts.factory.createIdentifier(name),\n        [],\n        type,\n        ts.factory.createBlock(\n          [\n            ts.factory.createReturnStatement(\n              ts.factory.createCallExpression(\n                ts.factory.createElementAccessExpression(ts.factory.createThis(), this.#getPropertyModelSymbol),\n                undefined,\n                [ts.factory.createStringLiteral(name), createModelBuildingCallback(type.typeName as Identifier, args)],\n              ),\n            ),\n          ],\n          true,\n        ),\n      );\n    });\n  }\n\n  #processModelClass(schema: Schema, entity: Identifier, parent: Identifier): ClassDeclaration | undefined {\n    const { logger } = this.#context.owner;\n\n    if (!isObjectSchema(schema)) {\n      logger.debug(schema, `Component is not an object: ${this.#fullyQualifiedName}`);\n      return undefined;\n    }\n\n    if (isEmptyObject(schema)) {\n      logger.warn(`Component has no properties: ${this.#fullyQualifiedName}`);\n    }\n\n    const typeT = ts.factory.createIdentifier('T');\n    const modelTypeParameters = ts.factory.createTypeParameterDeclaration(\n      undefined,\n      typeT,\n      ts.factory.createTypeReferenceNode(entity),\n      ts.factory.createTypeReferenceNode(entity),\n    );\n\n    return ts.factory.createClassDeclaration(\n      undefined,\n      this[$model].id,\n      [modelTypeParameters],\n      [\n        ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n          ts.factory.createExpressionWithTypeArguments(parent, [ts.factory.createTypeReferenceNode(typeT)]),\n        ]),\n      ],\n      [\n        createEmptyValueMaker(this.#makeObjectEmptyValueCreator, this[$model].id),\n        ...this.#processClassElements(schema),\n      ],\n    );\n  }\n\n  #processParentClass(schema: ReferenceSchema): Identifier {\n    const { imports, paths } = this[$dependencies];\n\n    const specifier = convertReferenceSchemaToSpecifier(schema);\n    const path = convertReferenceSchemaToPath(schema);\n    const modelPath = paths.createRelativePath(`${path}Model`);\n    const modelSpecifier = `${specifier}Model`;\n\n    return imports.default.add(modelPath, modelSpecifier, false);\n  }\n}\n\nexport class EntityEnumModelProcessor extends EntityModelProcessor {\n  constructor(name: string) {\n    super(name, false);\n  }\n\n  protected [$processDeclaration](): ClassDeclaration {\n    const enumModel = importBuiltInFormModel('EnumModel', this[$dependencies]);\n    const enumPropertySymbol = this[$dependencies].imports.named.add('@hilla/form', '_enum');\n    const makeEnumEmptyValueCreator = this[$dependencies].imports.named.add('@hilla/form', 'makeEnumEmptyValueCreator');\n\n    return ts.factory.createClassDeclaration(\n      undefined,\n      this[$model].id,\n      undefined,\n      [\n        ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n          ts.factory.createExpressionWithTypeArguments(enumModel, [\n            ts.factory.createTypeQueryNode(this[$entity].id, undefined),\n          ]),\n        ]),\n      ],\n      [\n        createEmptyValueMaker(makeEnumEmptyValueCreator, this[$model].id),\n        ts.factory.createPropertyDeclaration(\n          [ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword)],\n          ts.factory.createComputedPropertyName(enumPropertySymbol),\n          undefined,\n          undefined,\n          this[$entity].id,\n        ),\n      ],\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
