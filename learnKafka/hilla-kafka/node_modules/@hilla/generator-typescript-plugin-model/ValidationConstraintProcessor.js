import {
  isNonComposedRegularSchema
} from "@hilla/generator-typescript-core/Schema.js";
import { template, transform } from "@hilla/generator-typescript-utils/ast.js";
import ts, {
} from "typescript";
function hasValidationConstraints(schema) {
  return isNonComposedRegularSchema(schema) && "x-validation-constraints" in schema && schema["x-validation-constraints"].length > 0;
}
function selector([statement]) {
  return statement.declarationList.declarations[0].initializer;
}
const variableStatementVar = "const a";
class ValidationConstraintProcessor {
  #importer;
  constructor(importer) {
    this.#importer = importer;
  }
  process(constraint) {
    return ts.factory.createNewExpression(
      this.#importer(constraint.simpleName),
      void 0,
      constraint.attributes ? [this.#processAttributes(constraint.attributes)] : []
    );
  }
  #processAttributes(attributes) {
    const names = Object.keys(attributes);
    const tpl = JSON.stringify(names.includes("value") && names.length === 1 ? attributes.value : attributes);
    return template(`${variableStatementVar}=${tpl}`, selector, [
      transform(
        (node) => ts.isPropertyAssignment(node) && ts.isStringLiteral(node.name) ? ts.factory.createPropertyAssignment(node.name.text, node.initializer) : node
      )
    ]);
  }
}
export {
  ValidationConstraintProcessor,
  hasValidationConstraints
};
//# sourceMappingURL=ValidationConstraintProcessor.js.map
