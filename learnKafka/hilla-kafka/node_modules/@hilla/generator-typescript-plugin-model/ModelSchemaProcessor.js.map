{
  "version": 3,
  "sources": ["src/ModelSchemaProcessor.ts"],
  "sourcesContent": ["import {\n  type ArraySchema,\n  type BooleanSchema,\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  decomposeSchema,\n  type IntegerSchema,\n  isArraySchema,\n  isBooleanSchema,\n  isComposedSchema,\n  isIntegerSchema,\n  isMapSchema,\n  isNullableSchema,\n  isNumberSchema,\n  isReferenceSchema,\n  isStringSchema,\n  type MapSchema,\n  type NumberSchema,\n  type ReferenceSchema,\n  type Schema,\n  type StringSchema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport ts, {\n  type Expression,\n  type Identifier,\n  type PropertyAssignment,\n  type TypeNode,\n  type TypeReferenceNode,\n} from 'typescript';\nimport { MetadataProcessor } from './MetadataProcessor.js';\nimport { createModelBuildingCallback, importBuiltInFormModel } from './utils.js';\nimport { hasValidationConstraints, ValidationConstraintProcessor } from './ValidationConstraintProcessor.js';\n\nconst $dependencies = Symbol();\nconst $processArray = Symbol();\nconst $processRecord = Symbol();\nconst $processReference = Symbol();\nconst $processString = Symbol();\nconst $processNumber = Symbol();\nconst $processBoolean = Symbol();\nconst $processUnknown = Symbol();\nconst $originalSchema = Symbol();\nconst $schema = Symbol();\n\nexport abstract class ModelSchemaPartProcessor<T> {\n  protected readonly [$dependencies]: DependencyManager;\n  protected readonly [$originalSchema]: Schema;\n  protected readonly [$schema]: Schema;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    this[$dependencies] = dependencies;\n    this[$originalSchema] = schema;\n    this[$schema] = isComposedSchema(schema) ? decomposeSchema(schema)[0] : schema;\n  }\n\n  process(): T {\n    const schema = this[$schema];\n\n    if (isReferenceSchema(schema)) {\n      return this[$processReference](schema);\n    }\n\n    if (isArraySchema(schema)) {\n      return this[$processArray](schema);\n    }\n\n    if (isMapSchema(schema)) {\n      return this[$processRecord](schema);\n    }\n\n    if (isStringSchema(schema)) {\n      return this[$processString](schema);\n    }\n\n    if (isNumberSchema(schema) || isIntegerSchema(schema)) {\n      return this[$processNumber](schema);\n    }\n\n    if (isBooleanSchema(schema)) {\n      return this[$processBoolean](schema);\n    }\n\n    return this[$processUnknown](schema);\n  }\n\n  protected abstract [$processArray](schema: ArraySchema): T;\n  protected abstract [$processBoolean](schema: BooleanSchema): T;\n  protected abstract [$processNumber](schema: IntegerSchema | NumberSchema): T;\n  protected abstract [$processRecord](schema: MapSchema): T;\n  protected abstract [$processReference](schema: ReferenceSchema): T;\n  protected abstract [$processString](schema: StringSchema): T;\n  protected abstract [$processUnknown](schema: Schema): T;\n}\n\nfunction handleNullableInternalType(schema: Schema, typeNode: TypeNode): TypeNode {\n  return isNullableSchema(schema)\n    ? ts.factory.createUnionTypeNode([typeNode, ts.factory.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword)])\n    : typeNode;\n}\n\nclass ModelSchemaInternalTypeProcessor extends ModelSchemaPartProcessor<TypeNode> {\n  protected override [$processArray](schema: ArraySchema): TypeNode {\n    return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('ReadonlyArray'), [\n      handleNullableInternalType(\n        schema.items,\n        new ModelSchemaInternalTypeProcessor(schema.items, this[$dependencies]).process(),\n      ),\n    ]);\n  }\n\n  protected override [$processBoolean](_: BooleanSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword);\n  }\n\n  protected override [$processNumber](_: IntegerSchema | NumberSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword);\n  }\n\n  protected override [$processRecord]({ additionalProperties: props }: MapSchema): TypeNode {\n    const valueType =\n      typeof props === 'boolean'\n        ? ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)\n        : handleNullableInternalType(props, new ModelSchemaInternalTypeProcessor(props, this[$dependencies]).process());\n\n    return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('Record'), [\n      ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),\n      valueType,\n    ]);\n  }\n\n  protected override [$processReference](schema: ReferenceSchema): TypeNode {\n    const { imports, paths } = this[$dependencies];\n    const typeName = convertReferenceSchemaToSpecifier(schema);\n    const typePath = paths.createRelativePath(convertReferenceSchemaToPath(schema));\n    return ts.factory.createTypeReferenceNode(\n      imports.default.getIdentifier(typePath) ?? imports.default.add(typePath, typeName, true),\n    );\n  }\n\n  protected override [$processString](_: StringSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword);\n  }\n\n  protected override [$processUnknown](_: Schema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword);\n  }\n}\n\nclass ModelSchemaIdentifierProcessor extends ModelSchemaPartProcessor<Identifier> {\n  override [$processArray](_: ArraySchema): Identifier {\n    return importBuiltInFormModel('ArrayModel', this[$dependencies]);\n  }\n\n  override [$processBoolean](_: BooleanSchema): Identifier {\n    return importBuiltInFormModel('BooleanModel', this[$dependencies]);\n  }\n\n  override [$processNumber](_: IntegerSchema | NumberSchema): Identifier {\n    return importBuiltInFormModel('NumberModel', this[$dependencies]);\n  }\n\n  override [$processRecord](_: MapSchema): Identifier {\n    return importBuiltInFormModel('ObjectModel', this[$dependencies]);\n  }\n\n  override [$processReference](schema: ReferenceSchema): Identifier {\n    const { imports, paths } = this[$dependencies];\n\n    const name = `${convertReferenceSchemaToSpecifier(schema)}Model`;\n    const path = paths.createRelativePath(`${convertReferenceSchemaToPath(schema)}Model`);\n\n    return imports.default.getIdentifier(path) ?? imports.default.add(path, name);\n  }\n\n  override [$processString](_: StringSchema): Identifier {\n    return importBuiltInFormModel('StringModel', this[$dependencies]);\n  }\n\n  override [$processUnknown](_: Schema): Identifier {\n    return importBuiltInFormModel('ObjectModel', this[$dependencies]);\n  }\n}\n\nexport class ModelSchemaTypeProcessor extends ModelSchemaPartProcessor<TypeReferenceNode> {\n  readonly #id: ModelSchemaIdentifierProcessor;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    super(schema, dependencies);\n    this.#id = new ModelSchemaIdentifierProcessor(schema, dependencies);\n  }\n\n  protected override [$processArray](schema: ArraySchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processArray](schema), [\n      new ModelSchemaTypeProcessor(schema.items, this[$dependencies]).process(),\n    ]);\n  }\n\n  protected override [$processBoolean](schema: BooleanSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processBoolean](schema));\n  }\n\n  protected override [$processNumber](schema: IntegerSchema | NumberSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processNumber](schema));\n  }\n\n  protected override [$processRecord](schema: MapSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processRecord](schema), [\n      new ModelSchemaInternalTypeProcessor(schema, this[$dependencies]).process(),\n    ]);\n  }\n\n  protected override [$processReference](schema: ReferenceSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processReference](schema));\n  }\n\n  protected override [$processString](schema: StringSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processString](schema));\n  }\n\n  protected override [$processUnknown](schema: Schema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processUnknown](schema));\n  }\n}\n\nexport class ModelSchemaExpressionProcessor extends ModelSchemaPartProcessor<readonly Expression[]> {\n  readonly #validationConstraintProcessor: ValidationConstraintProcessor;\n  readonly #metadataProcessor: MetadataProcessor;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    super(schema, dependencies);\n    this.#validationConstraintProcessor = new ValidationConstraintProcessor((name) =>\n      importBuiltInFormModel(name, dependencies),\n    );\n    this.#metadataProcessor = new MetadataProcessor();\n  }\n\n  override process(): readonly ts.Expression[] {\n    const originalSchema = this[$originalSchema];\n\n    let result = super.process();\n\n    const modelOptionsProperties = [\n      this.#createValidatorsProperty(originalSchema),\n      this.#createMetadataProperty(originalSchema),\n    ].filter(Boolean) as PropertyAssignment[];\n\n    if (modelOptionsProperties.length > 0) {\n      const optionsObject = ts.factory.createObjectLiteralExpression(modelOptionsProperties);\n\n      result = [...result, optionsObject];\n    }\n\n    return [isNullableSchema(originalSchema) ? ts.factory.createTrue() : ts.factory.createFalse(), ...result];\n  }\n\n  protected override [$processArray](schema: ArraySchema): readonly Expression[] {\n    const model = new ModelSchemaIdentifierProcessor(schema.items, this[$dependencies]).process();\n\n    return [\n      createModelBuildingCallback(\n        model,\n        new ModelSchemaExpressionProcessor(schema.items, this[$dependencies]).process(),\n      ),\n    ];\n  }\n\n  protected override [$processBoolean](_: BooleanSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processNumber](_: IntegerSchema | NumberSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processRecord](_: MapSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processReference](_: ReferenceSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processString](_: StringSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processUnknown](_: Schema): readonly Expression[] {\n    return [];\n  }\n\n  #createValidatorsProperty(schema: Schema): PropertyAssignment | null {\n    if (!hasValidationConstraints(schema)) {\n      return null;\n    }\n\n    const constraints = schema['x-validation-constraints'].map((constraint) =>\n      this.#validationConstraintProcessor.process(constraint),\n    );\n    return ts.factory.createPropertyAssignment('validators', ts.factory.createArrayLiteralExpression(constraints));\n  }\n\n  #createMetadataProperty(schema: Schema): PropertyAssignment | null {\n    const metadata = this.#metadataProcessor.process(schema);\n    return metadata ? ts.factory.createPropertyAssignment('meta', metadata) : null;\n  }\n}\n"],
  "mappings": "AAAA;AAAA,EAGE;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAMK;AAEP,OAAO;AAAA,OAMA;AACP,SAAS,yBAAyB;AAClC,SAAS,6BAA6B,8BAA8B;AACpE,SAAS,0BAA0B,qCAAqC;AAExE,MAAM,gBAAgB,OAAO;AAC7B,MAAM,gBAAgB,OAAO;AAC7B,MAAM,iBAAiB,OAAO;AAC9B,MAAM,oBAAoB,OAAO;AACjC,MAAM,iBAAiB,OAAO;AAC9B,MAAM,iBAAiB,OAAO;AAC9B,MAAM,kBAAkB,OAAO;AAC/B,MAAM,kBAAkB,OAAO;AAC/B,MAAM,kBAAkB,OAAO;AAC/B,MAAM,UAAU,OAAO;AAEhB,MAAe,yBAA4B;AAAA,EAChD,CAAoB,aAAa;AAAA,EACjC,CAAoB,eAAe;AAAA,EACnC,CAAoB,OAAO;AAAA,EAE3B,YAAY,QAAgB,cAAiC;AAC3D,SAAK,aAAa,IAAI;AACtB,SAAK,eAAe,IAAI;AACxB,SAAK,OAAO,IAAI,iBAAiB,MAAM,IAAI,gBAAgB,MAAM,EAAE,CAAC,IAAI;AAAA,EAC1E;AAAA,EAEA,UAAa;AACX,UAAM,SAAS,KAAK,OAAO;AAE3B,QAAI,kBAAkB,MAAM,GAAG;AAC7B,aAAO,KAAK,iBAAiB,EAAE,MAAM;AAAA,IACvC;AAEA,QAAI,cAAc,MAAM,GAAG;AACzB,aAAO,KAAK,aAAa,EAAE,MAAM;AAAA,IACnC;AAEA,QAAI,YAAY,MAAM,GAAG;AACvB,aAAO,KAAK,cAAc,EAAE,MAAM;AAAA,IACpC;AAEA,QAAI,eAAe,MAAM,GAAG;AAC1B,aAAO,KAAK,cAAc,EAAE,MAAM;AAAA,IACpC;AAEA,QAAI,eAAe,MAAM,KAAK,gBAAgB,MAAM,GAAG;AACrD,aAAO,KAAK,cAAc,EAAE,MAAM;AAAA,IACpC;AAEA,QAAI,gBAAgB,MAAM,GAAG;AAC3B,aAAO,KAAK,eAAe,EAAE,MAAM;AAAA,IACrC;AAEA,WAAO,KAAK,eAAe,EAAE,MAAM;AAAA,EACrC;AASF;AAEA,SAAS,2BAA2B,QAAgB,UAA8B;AAChF,SAAO,iBAAiB,MAAM,IAC1B,GAAG,QAAQ,oBAAoB,CAAC,UAAU,GAAG,QAAQ,sBAAsB,GAAG,WAAW,gBAAgB,CAAC,CAAC,IAC3G;AACN;AAEA,MAAM,yCAAyC,yBAAmC;AAAA,EAChF,CAAoB,aAAa,EAAE,QAA+B;AAChE,WAAO,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,iBAAiB,eAAe,GAAG;AAAA,MACtF;AAAA,QACE,OAAO;AAAA,QACP,IAAI,iCAAiC,OAAO,OAAO,KAAK,aAAa,CAAC,EAAE,QAAQ;AAAA,MAClF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,CAAoB,eAAe,EAAE,GAA4B;AAC/D,WAAO,GAAG,QAAQ,sBAAsB,GAAG,WAAW,cAAc;AAAA,EACtE;AAAA,EAEA,CAAoB,cAAc,EAAE,GAA2C;AAC7E,WAAO,GAAG,QAAQ,sBAAsB,GAAG,WAAW,aAAa;AAAA,EACrE;AAAA,EAEA,CAAoB,cAAc,EAAE,EAAE,sBAAsB,MAAM,GAAwB;AACxF,UAAM,YACJ,OAAO,UAAU,YACb,GAAG,QAAQ,sBAAsB,GAAG,WAAW,UAAU,IACzD,2BAA2B,OAAO,IAAI,iCAAiC,OAAO,KAAK,aAAa,CAAC,EAAE,QAAQ,CAAC;AAElH,WAAO,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,iBAAiB,QAAQ,GAAG;AAAA,MAC/E,GAAG,QAAQ,sBAAsB,GAAG,WAAW,aAAa;AAAA,MAC5D;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,CAAoB,iBAAiB,EAAE,QAAmC;AACxE,UAAM,EAAE,SAAS,MAAM,IAAI,KAAK,aAAa;AAC7C,UAAM,WAAW,kCAAkC,MAAM;AACzD,UAAM,WAAW,MAAM,mBAAmB,6BAA6B,MAAM,CAAC;AAC9E,WAAO,GAAG,QAAQ;AAAA,MAChB,QAAQ,QAAQ,cAAc,QAAQ,KAAK,QAAQ,QAAQ,IAAI,UAAU,UAAU,IAAI;AAAA,IACzF;AAAA,EACF;AAAA,EAEA,CAAoB,cAAc,EAAE,GAA2B;AAC7D,WAAO,GAAG,QAAQ,sBAAsB,GAAG,WAAW,aAAa;AAAA,EACrE;AAAA,EAEA,CAAoB,eAAe,EAAE,GAAqB;AACxD,WAAO,GAAG,QAAQ,sBAAsB,GAAG,WAAW,cAAc;AAAA,EACtE;AACF;AAEA,MAAM,uCAAuC,yBAAqC;AAAA,EAChF,CAAU,aAAa,EAAE,GAA4B;AACnD,WAAO,uBAAuB,cAAc,KAAK,aAAa,CAAC;AAAA,EACjE;AAAA,EAEA,CAAU,eAAe,EAAE,GAA8B;AACvD,WAAO,uBAAuB,gBAAgB,KAAK,aAAa,CAAC;AAAA,EACnE;AAAA,EAEA,CAAU,cAAc,EAAE,GAA6C;AACrE,WAAO,uBAAuB,eAAe,KAAK,aAAa,CAAC;AAAA,EAClE;AAAA,EAEA,CAAU,cAAc,EAAE,GAA0B;AAClD,WAAO,uBAAuB,eAAe,KAAK,aAAa,CAAC;AAAA,EAClE;AAAA,EAEA,CAAU,iBAAiB,EAAE,QAAqC;AAChE,UAAM,EAAE,SAAS,MAAM,IAAI,KAAK,aAAa;AAE7C,UAAM,OAAO,GAAG,kCAAkC,MAAM,CAAC;AACzD,UAAM,OAAO,MAAM,mBAAmB,GAAG,6BAA6B,MAAM,CAAC,OAAO;AAEpF,WAAO,QAAQ,QAAQ,cAAc,IAAI,KAAK,QAAQ,QAAQ,IAAI,MAAM,IAAI;AAAA,EAC9E;AAAA,EAEA,CAAU,cAAc,EAAE,GAA6B;AACrD,WAAO,uBAAuB,eAAe,KAAK,aAAa,CAAC;AAAA,EAClE;AAAA,EAEA,CAAU,eAAe,EAAE,GAAuB;AAChD,WAAO,uBAAuB,eAAe,KAAK,aAAa,CAAC;AAAA,EAClE;AACF;AAEO,MAAM,iCAAiC,yBAA4C;AAAA,EAC/E;AAAA,EAET,YAAY,QAAgB,cAAiC;AAC3D,UAAM,QAAQ,YAAY;AAC1B,SAAK,MAAM,IAAI,+BAA+B,QAAQ,YAAY;AAAA,EACpE;AAAA,EAEA,CAAoB,aAAa,EAAE,QAAwC;AACzE,WAAO,GAAG,QAAQ,wBAAwB,KAAK,IAAI,aAAa,EAAE,MAAM,GAAG;AAAA,MACzE,IAAI,yBAAyB,OAAO,OAAO,KAAK,aAAa,CAAC,EAAE,QAAQ;AAAA,IAC1E,CAAC;AAAA,EACH;AAAA,EAEA,CAAoB,eAAe,EAAE,QAA0C;AAC7E,WAAO,GAAG,QAAQ,wBAAwB,KAAK,IAAI,eAAe,EAAE,MAAM,CAAC;AAAA,EAC7E;AAAA,EAEA,CAAoB,cAAc,EAAE,QAAyD;AAC3F,WAAO,GAAG,QAAQ,wBAAwB,KAAK,IAAI,cAAc,EAAE,MAAM,CAAC;AAAA,EAC5E;AAAA,EAEA,CAAoB,cAAc,EAAE,QAAsC;AACxE,WAAO,GAAG,QAAQ,wBAAwB,KAAK,IAAI,cAAc,EAAE,MAAM,GAAG;AAAA,MAC1E,IAAI,iCAAiC,QAAQ,KAAK,aAAa,CAAC,EAAE,QAAQ;AAAA,IAC5E,CAAC;AAAA,EACH;AAAA,EAEA,CAAoB,iBAAiB,EAAE,QAA4C;AACjF,WAAO,GAAG,QAAQ,wBAAwB,KAAK,IAAI,iBAAiB,EAAE,MAAM,CAAC;AAAA,EAC/E;AAAA,EAEA,CAAoB,cAAc,EAAE,QAAyC;AAC3E,WAAO,GAAG,QAAQ,wBAAwB,KAAK,IAAI,cAAc,EAAE,MAAM,CAAC;AAAA,EAC5E;AAAA,EAEA,CAAoB,eAAe,EAAE,QAAmC;AACtE,WAAO,GAAG,QAAQ,wBAAwB,KAAK,IAAI,eAAe,EAAE,MAAM,CAAC;AAAA,EAC7E;AACF;AAEO,MAAM,uCAAuC,yBAAgD;AAAA,EACzF;AAAA,EACA;AAAA,EAET,YAAY,QAAgB,cAAiC;AAC3D,UAAM,QAAQ,YAAY;AAC1B,SAAK,iCAAiC,IAAI;AAAA,MAA8B,CAAC,SACvE,uBAAuB,MAAM,YAAY;AAAA,IAC3C;AACA,SAAK,qBAAqB,IAAI,kBAAkB;AAAA,EAClD;AAAA,EAES,UAAoC;AAC3C,UAAM,iBAAiB,KAAK,eAAe;AAE3C,QAAI,SAAS,MAAM,QAAQ;AAE3B,UAAM,yBAAyB;AAAA,MAC7B,KAAK,0BAA0B,cAAc;AAAA,MAC7C,KAAK,wBAAwB,cAAc;AAAA,IAC7C,EAAE,OAAO,OAAO;AAEhB,QAAI,uBAAuB,SAAS,GAAG;AACrC,YAAM,gBAAgB,GAAG,QAAQ,8BAA8B,sBAAsB;AAErF,eAAS,CAAC,GAAG,QAAQ,aAAa;AAAA,IACpC;AAEA,WAAO,CAAC,iBAAiB,cAAc,IAAI,GAAG,QAAQ,WAAW,IAAI,GAAG,QAAQ,YAAY,GAAG,GAAG,MAAM;AAAA,EAC1G;AAAA,EAEA,CAAoB,aAAa,EAAE,QAA4C;AAC7E,UAAM,QAAQ,IAAI,+BAA+B,OAAO,OAAO,KAAK,aAAa,CAAC,EAAE,QAAQ;AAE5F,WAAO;AAAA,MACL;AAAA,QACE;AAAA,QACA,IAAI,+BAA+B,OAAO,OAAO,KAAK,aAAa,CAAC,EAAE,QAAQ;AAAA,MAChF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,CAAoB,eAAe,EAAE,GAAyC;AAC5E,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,CAAoB,cAAc,EAAE,GAAwD;AAC1F,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,CAAoB,cAAc,EAAE,GAAqC;AACvE,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,CAAoB,iBAAiB,EAAE,GAA2C;AAChF,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,CAAoB,cAAc,EAAE,GAAwC;AAC1E,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,CAAoB,eAAe,EAAE,GAAkC;AACrE,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,0BAA0B,QAA2C;AACnE,QAAI,CAAC,yBAAyB,MAAM,GAAG;AACrC,aAAO;AAAA,IACT;AAEA,UAAM,cAAc,OAAO,0BAA0B,EAAE;AAAA,MAAI,CAAC,eAC1D,KAAK,+BAA+B,QAAQ,UAAU;AAAA,IACxD;AACA,WAAO,GAAG,QAAQ,yBAAyB,cAAc,GAAG,QAAQ,6BAA6B,WAAW,CAAC;AAAA,EAC/G;AAAA,EAEA,wBAAwB,QAA2C;AACjE,UAAM,WAAW,KAAK,mBAAmB,QAAQ,MAAM;AACvD,WAAO,WAAW,GAAG,QAAQ,yBAAyB,QAAQ,QAAQ,IAAI;AAAA,EAC5E;AACF;",
  "names": []
}
