import Plugin from "@hilla/generator-typescript-core/Plugin.js";
import { EntityModelProcessor } from "./EntityModelProcessor.js";
var ModelPluginSourceType = /* @__PURE__ */ ((ModelPluginSourceType2) => {
  ModelPluginSourceType2["Model"] = "model";
  return ModelPluginSourceType2;
})(ModelPluginSourceType || {});
class ModelPlugin extends Plugin {
  static MODEL_PLUGIN_FILE_TAGS = "MODEL_PLUGIN_FILE_TAGS";
  #tags = /* @__PURE__ */ new WeakMap();
  get path() {
    return import.meta.url;
  }
  // eslint-disable-next-line @typescript-eslint/require-await
  async execute(storage) {
    const files = this.#processEntities(storage.api.components?.schemas);
    files.forEach((file) => this.#tags.set(file, "model" /* Model */));
    storage.sources.push(...files);
    storage.pluginStorage.set(this.constructor.MODEL_PLUGIN_FILE_TAGS, this.#tags);
  }
  #processEntities(schemas) {
    this.logger.debug("Processing entities");
    if (!schemas) {
      return [];
    }
    const ctx = {
      owner: this
    };
    return Object.entries(schemas).map(([name, component]) => EntityModelProcessor.process(name, component, ctx));
  }
}
export {
  ModelPluginSourceType,
  ModelPlugin as default
};
//# sourceMappingURL=index.js.map
