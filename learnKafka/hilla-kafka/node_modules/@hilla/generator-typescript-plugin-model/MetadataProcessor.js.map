{
  "version": 3,
  "sources": ["src/MetadataProcessor.ts"],
  "sourcesContent": ["import type { Schema } from '@hilla/generator-typescript-core/Schema.js';\nimport ts, { type ObjectLiteralExpression, type PropertyAssignment } from 'typescript';\n\ninterface Annotation {\n  name: string;\n  attributes?: Record<string, unknown>;\n}\n\nexport type SchemaWithMetadata = Schema & {\n  'x-annotations'?: Annotation[];\n  'x-java-type'?: string;\n};\n\nexport class MetadataProcessor {\n  process(schema: Schema): ObjectLiteralExpression | null {\n    const schemaWithMetadata = schema as SchemaWithMetadata;\n\n    const properties = [\n      this.#createAnnotationsProperty(schemaWithMetadata),\n      this.#createJavaTypeProperty(schemaWithMetadata),\n    ].filter(Boolean) as PropertyAssignment[];\n\n    if (properties.length === 0) {\n      return null;\n    }\n\n    return ts.factory.createObjectLiteralExpression(properties);\n  }\n\n  #createAnnotationsProperty(schema: SchemaWithMetadata): PropertyAssignment | null {\n    const annotations = schema['x-annotations'];\n    const hasAnnotations = annotations && annotations.length > 0;\n    if (!hasAnnotations) {\n      return null;\n    }\n\n    const annotationLiterals = annotations.map((annotation) =>\n      ts.factory.createObjectLiteralExpression([\n        ts.factory.createPropertyAssignment('name', ts.factory.createStringLiteral(annotation.name)),\n      ]),\n    );\n\n    return ts.factory.createPropertyAssignment(\n      'annotations',\n      ts.factory.createArrayLiteralExpression(annotationLiterals),\n    );\n  }\n\n  #createJavaTypeProperty(schema: SchemaWithMetadata): PropertyAssignment | null {\n    const javaType = schema['x-java-type'];\n    if (!javaType) {\n      return null;\n    }\n\n    return ts.factory.createPropertyAssignment('javaType', ts.factory.createStringLiteral(javaType));\n  }\n}\n"],
  "mappings": "AACA,OAAO,YAAmE;AAYnE,MAAM,kBAAkB;AAAA,EAC7B,QAAQ,QAAgD;AACtD,UAAM,qBAAqB;AAE3B,UAAM,aAAa;AAAA,MACjB,KAAK,2BAA2B,kBAAkB;AAAA,MAClD,KAAK,wBAAwB,kBAAkB;AAAA,IACjD,EAAE,OAAO,OAAO;AAEhB,QAAI,WAAW,WAAW,GAAG;AAC3B,aAAO;AAAA,IACT;AAEA,WAAO,GAAG,QAAQ,8BAA8B,UAAU;AAAA,EAC5D;AAAA,EAEA,2BAA2B,QAAuD;AAChF,UAAM,cAAc,OAAO,eAAe;AAC1C,UAAM,iBAAiB,eAAe,YAAY,SAAS;AAC3D,QAAI,CAAC,gBAAgB;AACnB,aAAO;AAAA,IACT;AAEA,UAAM,qBAAqB,YAAY;AAAA,MAAI,CAAC,eAC1C,GAAG,QAAQ,8BAA8B;AAAA,QACvC,GAAG,QAAQ,yBAAyB,QAAQ,GAAG,QAAQ,oBAAoB,WAAW,IAAI,CAAC;AAAA,MAC7F,CAAC;AAAA,IACH;AAEA,WAAO,GAAG,QAAQ;AAAA,MAChB;AAAA,MACA,GAAG,QAAQ,6BAA6B,kBAAkB;AAAA,IAC5D;AAAA,EACF;AAAA,EAEA,wBAAwB,QAAuD;AAC7E,UAAM,WAAW,OAAO,aAAa;AACrC,QAAI,CAAC,UAAU;AACb,aAAO;AAAA,IACT;AAEA,WAAO,GAAG,QAAQ,yBAAyB,YAAY,GAAG,QAAQ,oBAAoB,QAAQ,CAAC;AAAA,EACjG;AACF;",
  "names": []
}
