{
  "version": 3,
  "sources": ["src/CsrfUtils.ts"],
  "sourcesContent": ["import CookieManager from './CookieManager.js';\n\n/** @internal */\nexport const VAADIN_CSRF_HEADER = 'X-CSRF-Token';\n/** @internal */\nexport const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';\n/** @internal */\nexport const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';\n\nfunction extractContentFromMetaTag(element: HTMLMetaElement | null): string | undefined {\n  if (element) {\n    const value = element.content;\n    if (value && value.toLowerCase() !== 'undefined') {\n      return value;\n    }\n  }\n  return undefined;\n}\n\n/** @internal */\nfunction getSpringCsrfHeaderFromMetaTag(doc: Document): string | undefined {\n  const csrfHeader = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf_header\"]');\n  return extractContentFromMetaTag(csrfHeader);\n}\n\n/** @internal */\nfunction getSpringCsrfTokenFromMetaTag(doc: Document): string | undefined {\n  const csrfToken = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf\"]');\n  return extractContentFromMetaTag(csrfToken);\n}\n\n/** @internal */\nexport function getSpringCsrfInfo(doc: Document): Record<string, string> {\n  const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);\n  let csrf = CookieManager.get(SPRING_CSRF_COOKIE_NAME);\n  if (!csrf || csrf.length === 0) {\n    csrf = getSpringCsrfTokenFromMetaTag(doc);\n  }\n  const headers: Record<string, string> = {};\n  if (csrf && csrfHeader) {\n    headers._csrf = csrf;\n    // eslint-disable-next-line camelcase\n    headers._csrf_header = csrfHeader;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getSpringCsrfTokenHeadersForAuthRequest(doc: Document): Record<string, string> {\n  const csrfInfo = getSpringCsrfInfo(doc);\n  const headers: Record<string, string> = {};\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getCsrfTokenHeadersForEndpointRequest(doc: Document): Record<string, string> {\n  const headers: Record<string, string> = {};\n\n  const csrfInfo = getSpringCsrfInfo(doc);\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  } else {\n    headers[VAADIN_CSRF_HEADER] = CookieManager.get(VAADIN_CSRF_COOKIE_NAME) ?? '';\n  }\n\n  return headers;\n}\n"],
  "mappings": "AAAA,OAAO,mBAAmB;AAGnB,MAAM,qBAAqB;AAE3B,MAAM,0BAA0B;AAEhC,MAAM,0BAA0B;AAEvC,SAAS,0BAA0B,SAAqD;AACtF,MAAI,SAAS;AACX,UAAM,QAAQ,QAAQ;AACtB,QAAI,SAAS,MAAM,YAAY,MAAM,aAAa;AAChD,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAGA,SAAS,+BAA+B,KAAmC;AACzE,QAAM,aAAa,IAAI,KAAK,cAA+B,2BAA2B;AACtF,SAAO,0BAA0B,UAAU;AAC7C;AAGA,SAAS,8BAA8B,KAAmC;AACxE,QAAM,YAAY,IAAI,KAAK,cAA+B,oBAAoB;AAC9E,SAAO,0BAA0B,SAAS;AAC5C;AAGO,SAAS,kBAAkB,KAAuC;AACvE,QAAM,aAAa,+BAA+B,GAAG;AACrD,MAAI,OAAO,cAAc,IAAI,uBAAuB;AACpD,MAAI,CAAC,QAAQ,KAAK,WAAW,GAAG;AAC9B,WAAO,8BAA8B,GAAG;AAAA,EAC1C;AACA,QAAM,UAAkC,CAAC;AACzC,MAAI,QAAQ,YAAY;AACtB,YAAQ,QAAQ;AAEhB,YAAQ,eAAe;AAAA,EACzB;AACA,SAAO;AACT;AAGO,SAAS,wCAAwC,KAAuC;AAC7F,QAAM,WAAW,kBAAkB,GAAG;AACtC,QAAM,UAAkC,CAAC;AACzC,MAAI,SAAS,SAAS,SAAS,cAAc;AAC3C,YAAQ,SAAS,YAAY,IAAI,SAAS;AAAA,EAC5C;AACA,SAAO;AACT;AAGO,SAAS,sCAAsC,KAAuC;AAC3F,QAAM,UAAkC,CAAC;AAEzC,QAAM,WAAW,kBAAkB,GAAG;AACtC,MAAI,SAAS,SAAS,SAAS,cAAc;AAC3C,YAAQ,SAAS,YAAY,IAAI,SAAS;AAAA,EAC5C,OAAO;AACL,YAAQ,kBAAkB,IAAI,cAAc,IAAI,uBAAuB,KAAK;AAAA,EAC9E;AAEA,SAAO;AACT;",
  "names": []
}
