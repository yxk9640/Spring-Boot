import CookieManager from "./CookieManager.js";
const VAADIN_CSRF_HEADER = "X-CSRF-Token";
const VAADIN_CSRF_COOKIE_NAME = "csrfToken";
const SPRING_CSRF_COOKIE_NAME = "XSRF-TOKEN";
function extractContentFromMetaTag(element) {
  if (element) {
    const value = element.content;
    if (value && value.toLowerCase() !== "undefined") {
      return value;
    }
  }
  return void 0;
}
function getSpringCsrfHeaderFromMetaTag(doc) {
  const csrfHeader = doc.head.querySelector('meta[name="_csrf_header"]');
  return extractContentFromMetaTag(csrfHeader);
}
function getSpringCsrfTokenFromMetaTag(doc) {
  const csrfToken = doc.head.querySelector('meta[name="_csrf"]');
  return extractContentFromMetaTag(csrfToken);
}
function getSpringCsrfInfo(doc) {
  const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);
  let csrf = CookieManager.get(SPRING_CSRF_COOKIE_NAME);
  if (!csrf || csrf.length === 0) {
    csrf = getSpringCsrfTokenFromMetaTag(doc);
  }
  const headers = {};
  if (csrf && csrfHeader) {
    headers._csrf = csrf;
    headers._csrf_header = csrfHeader;
  }
  return headers;
}
function getSpringCsrfTokenHeadersForAuthRequest(doc) {
  const csrfInfo = getSpringCsrfInfo(doc);
  const headers = {};
  if (csrfInfo._csrf && csrfInfo._csrf_header) {
    headers[csrfInfo._csrf_header] = csrfInfo._csrf;
  }
  return headers;
}
function getCsrfTokenHeadersForEndpointRequest(doc) {
  const headers = {};
  const csrfInfo = getSpringCsrfInfo(doc);
  if (csrfInfo._csrf && csrfInfo._csrf_header) {
    headers[csrfInfo._csrf_header] = csrfInfo._csrf;
  } else {
    headers[VAADIN_CSRF_HEADER] = CookieManager.get(VAADIN_CSRF_COOKIE_NAME) ?? "";
  }
  return headers;
}
export {
  SPRING_CSRF_COOKIE_NAME,
  VAADIN_CSRF_COOKIE_NAME,
  VAADIN_CSRF_HEADER,
  getCsrfTokenHeadersForEndpointRequest,
  getSpringCsrfInfo,
  getSpringCsrfTokenHeadersForAuthRequest
};
//# sourceMappingURL=CsrfUtils.js.map
