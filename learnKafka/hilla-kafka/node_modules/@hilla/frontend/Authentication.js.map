{
  "version": 3,
  "sources": ["src/Authentication.ts"],
  "sourcesContent": ["import type { MiddlewareClass, MiddlewareContext, MiddlewareNext } from './Connect.js';\nimport CookieManager from './CookieManager.js';\nimport { getSpringCsrfInfo, getSpringCsrfTokenHeadersForAuthRequest, VAADIN_CSRF_HEADER } from './CsrfUtils.js';\n\nconst JWT_COOKIE_NAME = 'jwt.headerAndPayload';\n\nfunction getSpringCsrfTokenFromResponseBody(body: string): Record<string, string> {\n  const doc = new DOMParser().parseFromString(body, 'text/html');\n  return getSpringCsrfInfo(doc);\n}\n\nfunction clearSpringCsrfMetaTags() {\n  Array.from(document.head.querySelectorAll('meta[name=\"_csrf\"], meta[name=\"_csrf_header\"]')).forEach((el) =>\n    el.remove(),\n  );\n}\n\nfunction updateSpringCsrfMetaTags(springCsrfInfo: Record<string, string>) {\n  clearSpringCsrfMetaTags();\n  const headerNameMeta: HTMLMetaElement = document.createElement('meta');\n  headerNameMeta.name = '_csrf_header';\n  headerNameMeta.content = springCsrfInfo._csrf_header;\n  document.head.appendChild(headerNameMeta);\n  const tokenMeta: HTMLMetaElement = document.createElement('meta');\n  tokenMeta.name = '_csrf';\n  tokenMeta.content = springCsrfInfo._csrf;\n  document.head.appendChild(tokenMeta);\n}\n\nconst getVaadinCsrfTokenFromResponseBody = (body: string): string | undefined => {\n  const match = /window\\.Vaadin = \\{TypeScript: \\{\"csrfToken\":\"([0-9a-zA-Z\\\\-]{36})\"\\}\\};/iu.exec(body);\n  return match ? match[1] : undefined;\n};\n\nasync function updateCsrfTokensBasedOnResponse(response: Response): Promise<string | undefined> {\n  const responseText = await response.text();\n  const token = getVaadinCsrfTokenFromResponseBody(responseText);\n  const springCsrfTokenInfo = getSpringCsrfTokenFromResponseBody(responseText);\n  updateSpringCsrfMetaTags(springCsrfTokenInfo);\n\n  return token;\n}\n\nasync function doLogout(logoutUrl: string, headers: Record<string, string>) {\n  const response = await fetch(logoutUrl, { headers, method: 'POST' });\n  if (!response.ok) {\n    throw new Error(`failed to logout with response ${response.status}`);\n  }\n\n  await updateCsrfTokensBasedOnResponse(response);\n}\n\nexport interface LoginResult {\n  error: boolean;\n  token?: string;\n  errorTitle?: string;\n  errorMessage?: string;\n  redirectUrl?: string;\n  defaultUrl?: string;\n}\n\nexport interface LoginOptions {\n  loginProcessingUrl?: string;\n}\n\nexport interface LogoutOptions {\n  logoutUrl?: string;\n}\n\n/**\n * A helper method for Spring Security based form login.\n * @param username - username\n * @param password - password\n * @param options - defines additional options, e.g, the loginProcessingUrl etc.\n */\nexport async function login(username: string, password: string, options?: LoginOptions): Promise<LoginResult> {\n  try {\n    const data = new FormData();\n    data.append('username', username);\n    data.append('password', password);\n\n    const loginProcessingUrl = options?.loginProcessingUrl ?? 'login';\n    const headers = getSpringCsrfTokenHeadersForAuthRequest(document);\n    headers.source = 'typescript';\n    const response = await fetch(loginProcessingUrl, {\n      body: data,\n      headers,\n      method: 'POST',\n    });\n\n    // This code assumes that a VaadinSavedRequestAwareAuthenticationSuccessHandler is used on the server side,\n    // setting these header values based on the \"source=typescript\" header set above\n\n    const result = response.headers.get('Result');\n    const savedUrl = response.headers.get('Saved-url') ?? undefined;\n    const defaultUrl = response.headers.get('Default-url') ?? undefined;\n    const loginSuccessful = response.ok && result === 'success';\n\n    if (loginSuccessful) {\n      const vaadinCsrfToken = response.headers.get('Vaadin-CSRF') ?? undefined;\n\n      const springCsrfHeader = response.headers.get('Spring-CSRF-header') ?? undefined;\n      const springCsrfToken = response.headers.get('Spring-CSRF-token') ?? undefined;\n      if (springCsrfHeader && springCsrfToken) {\n        const springCsrfTokenInfo: Record<string, string> = {};\n        springCsrfTokenInfo._csrf = springCsrfToken;\n        // eslint-disable-next-line camelcase\n        springCsrfTokenInfo._csrf_header = springCsrfHeader;\n        updateSpringCsrfMetaTags(springCsrfTokenInfo);\n      }\n\n      return {\n        defaultUrl,\n        error: false,\n        redirectUrl: savedUrl,\n        token: vaadinCsrfToken,\n      };\n    }\n    return {\n      error: true,\n      errorMessage: 'Check that you have entered the correct username and password and try again.',\n      errorTitle: 'Incorrect username or password.',\n    };\n  } catch (e: unknown) {\n    if (e instanceof Error) {\n      return {\n        error: true,\n        errorMessage: e.message,\n        errorTitle: e.name,\n      };\n    }\n\n    throw e;\n  }\n}\n\n/**\n * A helper method for Spring Security based form logout\n * @param options - defines additional options, e.g, the logoutUrl.\n */\nexport async function logout(options?: LogoutOptions): Promise<void> {\n  // this assumes the default Spring Security logout configuration (handler URL)\n  const logoutUrl = options?.logoutUrl ?? 'logout';\n  try {\n    const headers = getSpringCsrfTokenHeadersForAuthRequest(document);\n    await doLogout(logoutUrl, headers);\n  } catch {\n    try {\n      const response = await fetch('?nocache');\n      const responseText = await response.text();\n      const doc = new DOMParser().parseFromString(responseText, 'text/html');\n      const headers = getSpringCsrfTokenHeadersForAuthRequest(doc);\n      await doLogout(logoutUrl, headers);\n    } catch (error) {\n      // clear the token if the call fails\n      clearSpringCsrfMetaTags();\n      throw error;\n    }\n  } finally {\n    CookieManager.remove(JWT_COOKIE_NAME);\n  }\n}\n\n/**\n * It defines what to do when it detects a session is invalid. E.g.,\n * show a login view.\n * It takes an <code>EndpointCallContinue</code> parameter, which can be\n * used to continue the endpoint call.\n */\nexport type OnInvalidSessionCallback = () => Promise<LoginResult>;\n\n/**\n * A helper class for handling invalid sessions during an endpoint call.\n * E.g., you can use this to show user a login page when the session has\n * expired.\n */\nexport class InvalidSessionMiddleware implements MiddlewareClass {\n  private readonly onInvalidSessionCallback: OnInvalidSessionCallback;\n\n  constructor(onInvalidSessionCallback: OnInvalidSessionCallback) {\n    this.onInvalidSessionCallback = onInvalidSessionCallback;\n  }\n\n  async invoke(context: MiddlewareContext, next: MiddlewareNext): Promise<Response> {\n    const clonedContext = { ...context };\n    clonedContext.request = context.request.clone();\n    const response = await next(context);\n    if (response.status === 401) {\n      const loginResult = await this.onInvalidSessionCallback();\n      if (loginResult.token) {\n        clonedContext.request.headers.set(VAADIN_CSRF_HEADER, loginResult.token);\n        return next(clonedContext) as Promise<Response>;\n      }\n    }\n    return response;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
