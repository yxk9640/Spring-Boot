{
  "version": 3,
  "sources": ["src/FluxConnection.ts"],
  "sourcesContent": ["import type { ReactiveControllerHost } from '@lit/reactive-element';\nimport atmosphere from 'atmosphere.js';\nimport type { Subscription } from './Connect.js';\nimport { getCsrfTokenHeadersForEndpointRequest } from './CsrfUtils.js';\nimport {\n  isClientMessage,\n  type ServerCloseMessage,\n  type ServerConnectMessage,\n  type ServerMessage,\n} from './FluxMessages.js';\n\nexport enum State {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\ntype ActiveEvent = CustomEvent<{ active: boolean }>;\ninterface EventMap {\n  'state-changed': ActiveEvent;\n}\n\ntype ListenerType<T extends keyof EventMap> =\n  | ((this: FluxConnection, ev: EventMap[T]) => any)\n  | {\n      handleEvent(ev: EventMap[T]): void;\n    }\n  | null;\n\n/**\n * A representation of the underlying persistent network connection used for subscribing to Flux type endpoint methods.\n */\nexport class FluxConnection extends EventTarget {\n  state: State = State.INACTIVE;\n  readonly #endpointInfos = new Map<string, string>();\n  #nextId = 0;\n  readonly #onCompleteCallbacks = new Map<string, () => void>();\n  readonly #onErrorCallbacks = new Map<string, () => void>();\n  readonly #onNextCallbacks = new Map<string, (value: any) => void>();\n  #pendingMessages: ServerMessage[] = [];\n  #socket?: Atmosphere.Request;\n\n  constructor(connectPrefix: string) {\n    super();\n    this.#connectWebsocket(connectPrefix.replace(/connect$/u, ''));\n  }\n\n  /**\n   * Subscribes to the flux returned by the given endpoint name + method name using the given parameters.\n   *\n   * @param endpointName - the endpoint to connect to\n   * @param methodName - the method in the endpoint to connect to\n   * @param parameters - the parameters to use\n   * @returns a subscription\n   */\n  subscribe(endpointName: string, methodName: string, parameters?: unknown[]): Subscription<any> {\n    const id: string = this.#nextId.toString();\n    this.#nextId += 1;\n    const params = parameters ?? [];\n\n    const msg: ServerConnectMessage = { '@type': 'subscribe', endpointName, id, methodName, params };\n    const endpointInfo = `${endpointName}.${methodName}(${JSON.stringify(params)})`;\n    this.#send(msg);\n    this.#endpointInfos.set(id, endpointInfo);\n    const hillaSubscription: Subscription<any> = {\n      cancel: () => {\n        if (!this.#endpointInfos.has(id)) {\n          // Subscription already closed or canceled\n          return;\n        }\n\n        const closeMessage: ServerCloseMessage = { '@type': 'unsubscribe', id };\n        this.#send(closeMessage);\n        this.#removeSubscription(id);\n      },\n      context(context: ReactiveControllerHost): Subscription<any> {\n        context.addController({\n          hostDisconnected() {\n            hillaSubscription.cancel();\n          },\n        });\n        return hillaSubscription;\n      },\n      onComplete: (callback: () => void): Subscription<any> => {\n        this.#onCompleteCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      onError: (callback: () => void): Subscription<any> => {\n        this.#onErrorCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      onNext: (callback: (value: any) => void): Subscription<any> => {\n        this.#onNextCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n    };\n    return hillaSubscription;\n  }\n\n  #connectWebsocket(prefix: string) {\n    const extraHeaders = getCsrfTokenHeadersForEndpointRequest(document);\n    const pushUrl = 'HILLA/push';\n    const url = prefix.length === 0 ? pushUrl : (prefix.endsWith('/') ? prefix : `${prefix}/`) + pushUrl;\n    this.#socket = atmosphere.subscribe?.({\n      contentType: 'application/json; charset=UTF-8',\n      enableProtocol: true,\n      fallbackTransport: 'long-polling',\n      headers: extraHeaders,\n      maxReconnectOnClose: 10000000,\n      onClose: (_) => {\n        // https://socket.io/docs/v4/client-api/#event-disconnect\n        if (this.state === State.ACTIVE) {\n          this.state = State.INACTIVE;\n          this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: false } }));\n        }\n      },\n      onError: (response) => {\n        // eslint-disable-next-line no-console\n        console.error('error in push communication', response);\n      },\n      onMessage: (response) => {\n        if (response.responseBody) {\n          this.#handleMessage(JSON.parse(response.responseBody));\n        }\n      },\n      onOpen: (_response: any) => {\n        if (this.state === State.INACTIVE) {\n          this.state = State.ACTIVE;\n          this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: true } }));\n          this.#sendPendingMessages();\n        }\n      },\n      onReopen: (_response: any) => {\n        if (this.state === State.INACTIVE) {\n          this.state = State.ACTIVE;\n          this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: true } }));\n          this.#sendPendingMessages();\n        }\n      },\n      reconnectInterval: 5000,\n      timeout: -1,\n      trackMessageLength: true,\n      transport: 'websocket',\n      url,\n    } satisfies Atmosphere.Request);\n  }\n\n  #handleMessage(message: unknown) {\n    if (isClientMessage(message)) {\n      const { id } = message;\n      const endpointInfo = this.#endpointInfos.get(id) ?? 'unknown';\n\n      if (message['@type'] === 'update') {\n        const callback = this.#onNextCallbacks.get(id);\n        if (callback) {\n          callback(message.item);\n        }\n      } else if (message['@type'] === 'complete') {\n        this.#onCompleteCallbacks.get(id)?.();\n        this.#removeSubscription(id);\n      } else {\n        const callback = this.#onErrorCallbacks.get(id);\n        if (callback) {\n          callback();\n        }\n        this.#removeSubscription(id);\n        if (!callback) {\n          throw new Error(`Error in ${endpointInfo}: ${message.message}`);\n        }\n      }\n    } else {\n      throw new Error(`Unknown message from server: ${String(message)}`);\n    }\n  }\n\n  #removeSubscription(id: string) {\n    this.#onNextCallbacks.delete(id);\n    this.#onCompleteCallbacks.delete(id);\n    this.#onErrorCallbacks.delete(id);\n    this.#endpointInfos.delete(id);\n  }\n\n  #send(message: ServerMessage) {\n    if (this.state === State.INACTIVE) {\n      this.#pendingMessages.push(message);\n    } else {\n      this.#socket?.push?.(JSON.stringify(message));\n    }\n  }\n\n  #sendPendingMessages() {\n    this.#pendingMessages.forEach((msg) => this.#send(msg));\n    this.#pendingMessages = [];\n  }\n}\n\nexport interface FluxConnection {\n  addEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;\n  removeEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;\n}\n"],
  "mappings": "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",
  "names": ["State"]
}
