class EndpointError extends Error {
  /**
   * The optional detail object, containing additional information sent
   * from the backend
   */
  detail;
  /**
   * The optional name of the exception that was thrown on a backend
   */
  type;
  /**
   * @param message - the `message` property value
   * @param type - the `type` property value
   * @param detail - the `detail` property value
   */
  constructor(message, type, detail) {
    super(message);
    this.type = type;
    this.detail = detail;
  }
}
class EndpointValidationError extends EndpointError {
  /**
   * An array of the validation errors.
   */
  validationErrorData;
  /**
   * An original validation error message.
   */
  validationErrorMessage;
  /**
   * @param message - the `message` property value
   * @param validationErrorData - the `validationErrorData` property value
   * @param type - the `type` property value
   */
  constructor(message, validationErrorData, type) {
    super(message, type, validationErrorData);
    this.validationErrorMessage = message;
    this.detail = null;
    this.validationErrorData = validationErrorData;
  }
}
class EndpointResponseError extends EndpointError {
  /**
   * The optional response object, containing the HTTP response error
   */
  response;
  /**
   * @param message - the `message` property value
   * @param response - the `response` property value
   */
  constructor(message, response) {
    super(message, "EndpointResponseError", response);
    this.response = response;
  }
  /**
   * Convenience property to get the HTTP code status directly
   */
  get status() {
    return this.response.status;
  }
}
class UnauthorizedResponseError extends EndpointResponseError {
  constructor(message, response) {
    super(message, response);
    this.type = "UnauthorizedResponseError";
  }
}
class ForbiddenResponseError extends EndpointResponseError {
  constructor(message, response) {
    super(message, response);
    this.type = "ForbiddenResponseError";
  }
}
class ValidationErrorData {
  /**
   * The validation error message.
   */
  message;
  /**
   * The parameter name that caused the validation error.
   */
  parameterName;
  /**
   * @param message - The `message` property value
   * @param parameterName - The `parameterName` property value
   */
  constructor(message, parameterName) {
    this.message = message;
    this.parameterName = parameterName;
  }
}
export {
  EndpointError,
  EndpointResponseError,
  EndpointValidationError,
  ForbiddenResponseError,
  UnauthorizedResponseError,
  ValidationErrorData
};
//# sourceMappingURL=EndpointErrors.js.map
