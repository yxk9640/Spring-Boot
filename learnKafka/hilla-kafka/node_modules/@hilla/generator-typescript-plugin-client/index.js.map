{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["import { open } from 'fs/promises';\nimport { fileURLToPath } from 'url';\nimport Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport type SharedStorage from '@hilla/generator-typescript-core/SharedStorage.js';\nimport ClientProcessor from './ClientProcessor.js';\n\nexport default class ClientPlugin extends Plugin {\n  static readonly CLIENT_FILE_NAME = 'connect-client.default';\n  static readonly CUSTOM_CLIENT_FILE_NAME = '../connect-client';\n\n  static async getClientFileName(path?: string): Promise<string> {\n    return (await ClientPlugin.#checkForCustomClientFile(path))\n      ? ClientPlugin.CUSTOM_CLIENT_FILE_NAME\n      : ClientPlugin.CLIENT_FILE_NAME;\n  }\n\n  static async #checkForCustomClientFile(path?: string): Promise<boolean> {\n    const dir = path?.startsWith('file:') ? fileURLToPath(path) : path;\n\n    try {\n      return !!(dir && (await open(`${dir}/${ClientPlugin.CUSTOM_CLIENT_FILE_NAME}.ts`, 'r')));\n    } catch (e) {\n      return false;\n    }\n  }\n\n  declare ['constructor']: typeof ClientPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  override async execute({ outputDir, sources }: SharedStorage): Promise<void> {\n    // the client file is created only if a custom client file is not found\n    if (!(outputDir && (await ClientPlugin.#checkForCustomClientFile(outputDir)))) {\n      const clientFile = new ClientProcessor(this.constructor.CLIENT_FILE_NAME, this).process();\n      sources.push(clientFile);\n    }\n  }\n}\n"],
  "mappings": "AAAA,SAAS,YAAY;AACrB,SAAS,qBAAqB;AAC9B,OAAO,YAAY;AAEnB,OAAO,qBAAqB;AAE5B,MAAO,qBAAmC,OAAO;AAAA,EAC/C,OAAgB,mBAAmB;AAAA,EACnC,OAAgB,0BAA0B;AAAA,EAE1C,aAAa,kBAAkB,MAAgC;AAC7D,WAAQ,MAAM,aAAa,0BAA0B,IAAI,IACrD,aAAa,0BACb,aAAa;AAAA,EACnB;AAAA,EAEA,aAAa,0BAA0B,MAAiC;AACtE,UAAM,MAAM,MAAM,WAAW,OAAO,IAAI,cAAc,IAAI,IAAI;AAE9D,QAAI;AACF,aAAO,CAAC,EAAE,OAAQ,MAAM,KAAK,GAAG,GAAG,IAAI,aAAa,uBAAuB,OAAO,GAAG;AAAA,IACvF,SAAS,GAAG;AACV,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAIA,IAAa,OAAe;AAC1B,WAAO,YAAY;AAAA,EACrB;AAAA,EAEA,MAAe,QAAQ,EAAE,WAAW,QAAQ,GAAiC;AAE3E,QAAI,EAAE,aAAc,MAAM,aAAa,0BAA0B,SAAS,IAAK;AAC7E,YAAM,aAAa,IAAI,gBAAgB,KAAK,YAAY,kBAAkB,IAAI,EAAE,QAAQ;AACxF,cAAQ,KAAK,UAAU;AAAA,IACzB;AAAA,EACF;AACF;",
  "names": []
}
