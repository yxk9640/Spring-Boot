import ts, {
} from "typescript";
function template(code, selectorOrTransformers, transformers) {
  let selector;
  if (Array.isArray(selectorOrTransformers)) {
    transformers = selectorOrTransformers;
  } else {
    selector = selectorOrTransformers;
  }
  let sourceFile = ts.createSourceFile("f.ts", code, ts.ScriptTarget.Latest, false);
  if (transformers) {
    [sourceFile] = ts.transform(
      sourceFile,
      transformers
    ).transformed;
  }
  return selector?.(sourceFile.statements) ?? sourceFile.statements;
}
function transform(transformer) {
  return (context) => (root) => {
    const visitor = (node) => ts.visitEachChild(transformer(node), visitor, context);
    return ts.visitEachChild(root, visitor, context);
  };
}
export {
  template,
  transform
};
//# sourceMappingURL=ast.js.map
