{
  "version": 3,
  "sources": ["../src/dependencies/PathManager.ts"],
  "sourcesContent": ["import { posix } from 'path';\nimport type { SetRequired } from 'type-fest';\n\nexport type PathManagerOptions = Readonly<{\n  aliasRoot?: string;\n  extension?: string;\n  relativeTo?: string;\n}>;\n\nexport default class PathManager {\n  readonly #options: SetRequired<PathManagerOptions, 'relativeTo'>;\n\n  constructor(options?: PathManagerOptions) {\n    let extension: string | undefined;\n\n    if (options?.extension) {\n      extension = options.extension.startsWith('.') ? options.extension : `.${options.extension}`;\n    }\n\n    this.#options = {\n      ...options,\n      extension,\n      relativeTo: options?.relativeTo ?? '.',\n    };\n  }\n\n  get aliasRoot(): string | undefined {\n    return this.#options.aliasRoot;\n  }\n\n  createBareModulePath(path: string, isFile = false): string {\n    const { extension } = this.#options;\n\n    if (extension && isFile) {\n      return `${path}.${extension}`;\n    }\n\n    return path;\n  }\n\n  createRelativePath(path: string, relativeTo = this.#options.relativeTo): string {\n    const { extension } = this.#options;\n    let result = path;\n\n    if (extension && !path.endsWith(extension)) {\n      result = `${result}${extension}`;\n    }\n\n    result = posix.relative(relativeTo, result);\n    return result.startsWith('.') ? result : `./${result}`;\n  }\n\n  createTSAliasModulePath(path: string, root = this.#options.aliasRoot): string {\n    return root ? `${root}/${path}` : path;\n  }\n}\n"],
  "mappings": "AAAA,SAAS,aAAa;AAStB,MAAO,YAA0B;AAAA,EACtB;AAAA,EAET,YAAY,SAA8B;AACxC,QAAI;AAEJ,QAAI,SAAS,WAAW;AACtB,kBAAY,QAAQ,UAAU,WAAW,GAAG,IAAI,QAAQ,YAAY,IAAI,QAAQ,SAAS;AAAA,IAC3F;AAEA,SAAK,WAAW;AAAA,MACd,GAAG;AAAA,MACH;AAAA,MACA,YAAY,SAAS,cAAc;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,IAAI,YAAgC;AAClC,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,qBAAqB,MAAc,SAAS,OAAe;AACzD,UAAM,EAAE,UAAU,IAAI,KAAK;AAE3B,QAAI,aAAa,QAAQ;AACvB,aAAO,GAAG,IAAI,IAAI,SAAS;AAAA,IAC7B;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,mBAAmB,MAAc,aAAa,KAAK,SAAS,YAAoB;AAC9E,UAAM,EAAE,UAAU,IAAI,KAAK;AAC3B,QAAI,SAAS;AAEb,QAAI,aAAa,CAAC,KAAK,SAAS,SAAS,GAAG;AAC1C,eAAS,GAAG,MAAM,GAAG,SAAS;AAAA,IAChC;AAEA,aAAS,MAAM,SAAS,YAAY,MAAM;AAC1C,WAAO,OAAO,WAAW,GAAG,IAAI,SAAS,KAAK,MAAM;AAAA,EACtD;AAAA,EAEA,wBAAwB,MAAc,OAAO,KAAK,SAAS,WAAmB;AAC5E,WAAO,OAAO,GAAG,IAAI,IAAI,IAAI,KAAK;AAAA,EACpC;AACF;",
  "names": []
}
