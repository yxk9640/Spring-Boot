{
  "version": 3,
  "sources": ["../src/dependencies/StatementRecordManager.ts"],
  "sourcesContent": ["import type { Statement } from 'typescript';\nimport type CodeConvertable from './CodeConvertable.js';\n\nexport type StatementRecord<T extends Statement> = readonly [path: string, declaration: T];\n\nexport default abstract class StatementRecordManager<T extends Statement> implements CodeConvertable<readonly T[]> {\n  static createComparator<T extends Statement>(\n    collator: Intl.Collator,\n  ): (recordA: StatementRecord<T>, recordB: StatementRecord<T>) => number {\n    return ([pathA], [pathB]) => {\n      if (pathA.startsWith('.') && !pathB.startsWith('.')) {\n        return 1;\n      }\n\n      if (!pathA.startsWith('.') && pathB.startsWith('.')) {\n        return -1;\n      }\n\n      return collator.compare(pathA, pathB);\n    };\n  }\n\n  declare ['constructor']: typeof StatementRecordManager;\n  readonly #collator: Intl.Collator;\n\n  constructor(collator: Intl.Collator) {\n    this.#collator = collator;\n  }\n\n  abstract statementRecords(): IterableIterator<StatementRecord<T>>;\n\n  toCode(): readonly T[] {\n    const records = [...this.statementRecords()];\n    records.sort(this.constructor.createComparator(this.#collator));\n\n    return records.map(([, statement]) => statement);\n  }\n\n  abstract clear(): void;\n}\n"],
  "mappings": "AAKA,MAAO,uBAA4G;AAAA,EACjH,OAAO,iBACL,UACsE;AACtE,WAAO,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK,MAAM;AAC3B,UAAI,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,WAAW,GAAG,GAAG;AACnD,eAAO;AAAA,MACT;AAEA,UAAI,CAAC,MAAM,WAAW,GAAG,KAAK,MAAM,WAAW,GAAG,GAAG;AACnD,eAAO;AAAA,MACT;AAEA,aAAO,SAAS,QAAQ,OAAO,KAAK;AAAA,IACtC;AAAA,EACF;AAAA,EAGS;AAAA,EAET,YAAY,UAAyB;AACnC,SAAK,YAAY;AAAA,EACnB;AAAA,EAIA,SAAuB;AACrB,UAAM,UAAU,CAAC,GAAG,KAAK,iBAAiB,CAAC;AAC3C,YAAQ,KAAK,KAAK,YAAY,iBAAiB,KAAK,SAAS,CAAC;AAE9D,WAAO,QAAQ,IAAI,CAAC,CAAC,EAAE,SAAS,MAAM,SAAS;AAAA,EACjD;AAGF;",
  "names": []
}
