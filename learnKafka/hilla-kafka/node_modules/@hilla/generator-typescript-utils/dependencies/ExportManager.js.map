{
  "version": 3,
  "sources": ["../src/dependencies/ExportManager.ts"],
  "sourcesContent": ["import ts, { type ExportAssignment, type ExportDeclaration, type Identifier, type Statement } from 'typescript';\nimport createFullyUniqueIdentifier from '../createFullyUniqueIdentifier.js';\nimport type CodeConvertable from './CodeConvertable.js';\nimport StatementRecordManager, { type StatementRecord } from './StatementRecordManager.js';\nimport { createDependencyRecord, type DependencyRecord } from './utils.js';\n\nexport class NamedExportManager implements CodeConvertable<ExportDeclaration | undefined> {\n  readonly #collator: Intl.Collator;\n  readonly #map = new Map<string, DependencyRecord>();\n\n  constructor(collator: Intl.Collator) {\n    this.#collator = collator;\n  }\n\n  add(name: string, isType?: boolean, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(name, createDependencyRecord(id, isType));\n    return id;\n  }\n\n  getIdentifier(name: string): Identifier | undefined {\n    return this.#map.get(name)?.id;\n  }\n\n  *identifiers(): IterableIterator<readonly [id: Identifier, isType: boolean]> {\n    for (const { id, isType } of this.#map.values()) {\n      yield [id, isType];\n    }\n  }\n\n  isType(name: string): boolean | undefined {\n    return this.#map.get(name)?.isType;\n  }\n\n  names(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  toCode(): ExportDeclaration | undefined {\n    if (this.#map.size === 0) {\n      return undefined;\n    }\n\n    const names = [...this.#map.keys()];\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    names.sort(this.#collator.compare);\n\n    return ts.factory.createExportDeclaration(\n      undefined,\n      false,\n      ts.factory.createNamedExports(\n        names.map((name) => {\n          const { id, isType } = this.#map.get(name)!;\n          return ts.factory.createExportSpecifier(isType, id, ts.factory.createIdentifier(name));\n        }),\n      ),\n      undefined,\n    );\n  }\n}\n\nexport class NamespaceExportManager extends StatementRecordManager<ExportDeclaration> {\n  readonly #map = new Map<string, Identifier | null>();\n\n  addCombined(path: string, name: string, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(path, id);\n    return id;\n  }\n\n  addSpread(path: string): void {\n    this.#map.set(path, null);\n  }\n\n  override clear(): void {\n    this.#map.clear();\n  }\n\n  getIdentifier(path: string): Identifier | null | undefined {\n    return this.#map.get(path);\n  }\n\n  identifiers(): IterableIterator<Identifier | null> {\n    return this.#map.values();\n  }\n\n  isCombined(path: string): boolean | undefined {\n    return this.#map.has(path) ? this.#map.get(path) !== null : undefined;\n  }\n\n  isSpread(path: string): boolean | undefined {\n    return this.#map.has(path) ? this.#map.get(path) === null : undefined;\n  }\n\n  paths(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  override *statementRecords(): IterableIterator<StatementRecord<ExportDeclaration>> {\n    for (const [path, id] of this.#map) {\n      yield [\n        path,\n        ts.factory.createExportDeclaration(\n          undefined,\n          false,\n          id !== null ? ts.factory.createNamespaceExport(id) : undefined,\n          ts.factory.createStringLiteral(path),\n        ),\n      ];\n    }\n  }\n}\n\nexport class DefaultExportManager implements CodeConvertable<ExportAssignment | undefined> {\n  #id?: Identifier;\n\n  set(id: Identifier | string): Identifier {\n    this.#id = typeof id === 'string' ? ts.factory.createIdentifier(id) : id;\n    return this.#id;\n  }\n\n  toCode(): ExportAssignment | undefined {\n    return this.#id ? ts.factory.createExportAssignment(undefined, undefined, this.#id) : undefined;\n  }\n}\n\nexport default class ExportManager implements CodeConvertable<readonly Statement[]> {\n  readonly default = new DefaultExportManager();\n  readonly named: NamedExportManager;\n  readonly namespace: NamespaceExportManager;\n\n  constructor(collator: Intl.Collator) {\n    this.named = new NamedExportManager(collator);\n    this.namespace = new NamespaceExportManager(collator);\n  }\n\n  toCode(): readonly Statement[] {\n    const defaultStatement = this.default.toCode();\n    const namedStatement = this.named.toCode();\n    const namespaceStatements = this.namespace.toCode();\n\n    const result: Statement[] = [];\n\n    if (namedStatement) {\n      result.push(namedStatement);\n    }\n\n    result.push(...namespaceStatements);\n\n    if (defaultStatement) {\n      result.push(defaultStatement);\n    }\n\n    return result;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
