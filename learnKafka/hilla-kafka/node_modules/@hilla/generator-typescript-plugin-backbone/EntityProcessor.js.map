{
  "version": 3,
  "sources": ["src/EntityProcessor.ts"],
  "sourcesContent": ["import { dirname } from 'path/posix';\nimport type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport {\n  type EnumSchema,\n  type ReferenceSchema,\n  type Schema,\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  decomposeSchema,\n  isComposedSchema,\n  isEmptyObject,\n  isEnumSchema,\n  isNullableSchema,\n  isObjectSchema,\n  isReferenceSchema,\n  type ObjectSchema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport {\n  convertFullyQualifiedNameToRelativePath,\n  simplifyFullyQualifiedName,\n} from '@hilla/generator-typescript-core/utils.js';\nimport createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';\nimport ts, {\n  type Identifier,\n  type InterfaceDeclaration,\n  type SourceFile,\n  type Statement,\n  type TypeElement,\n} from 'typescript';\nimport TypeSchemaProcessor from './TypeSchemaProcessor.js';\n\nexport class EntityProcessor {\n  readonly #component: Schema;\n  readonly #dependencies;\n  readonly #fullyQualifiedName: string;\n  readonly #name: string;\n  readonly #outputPathManager = new PathManager({ extension: 'ts' });\n  readonly #owner: Plugin;\n  readonly #path: string;\n\n  constructor(name: string, component: Schema, owner: Plugin) {\n    this.#component = component;\n    this.#owner = owner;\n    this.#fullyQualifiedName = name;\n    this.#name = simplifyFullyQualifiedName(name);\n    this.#path = convertFullyQualifiedNameToRelativePath(name);\n    this.#dependencies = new DependencyManager(new PathManager({ extension: '.js', relativeTo: dirname(this.#path) }));\n  }\n\n  get #id(): Identifier {\n    const id = ts.factory.createIdentifier(this.#name);\n\n    this.#dependencies.exports.default.set(id);\n\n    return id;\n  }\n\n  process(): SourceFile {\n    this.#owner.logger.debug(`Processing entity: ${this.#name}`);\n\n    const declaration = isEnumSchema(this.#component)\n      ? this.#processEnum(this.#component)\n      : this.#processExtendedClass(this.#component);\n\n    const statements = declaration ? [declaration] : [];\n\n    const { exports, imports } = this.#dependencies;\n\n    return createSourceFile(\n      [...imports.toCode(), ...statements, ...exports.toCode()],\n      this.#outputPathManager.createRelativePath(this.#path),\n    );\n  }\n\n  #processClass(schema: Schema): InterfaceDeclaration | undefined {\n    const { logger } = this.#owner;\n\n    if (!isObjectSchema(schema)) {\n      logger.debug(schema, `Component is not an object: '${this.#fullyQualifiedName}'`);\n      return undefined;\n    }\n\n    if (isEmptyObject(schema)) {\n      logger.debug(`Component has no properties:' ${this.#fullyQualifiedName}'`);\n    }\n\n    return ts.factory.createInterfaceDeclaration(\n      undefined,\n      this.#id,\n      undefined,\n      undefined,\n      this.#processTypeElements(schema as ObjectSchema),\n    );\n  }\n\n  #processEnum({ enum: members }: EnumSchema): Statement {\n    return ts.factory.createEnumDeclaration(\n      undefined,\n      this.#id,\n      members.map((member) => ts.factory.createEnumMember(member, ts.factory.createStringLiteral(member))),\n    );\n  }\n\n  #processExtendedClass(schema: Schema): Statement | undefined {\n    const { logger } = this.#owner;\n\n    if (isComposedSchema(schema)) {\n      const decomposed = decomposeSchema(schema);\n\n      if (decomposed.length > 2) {\n        logger.debug(\n          schema,\n          `Schema for '${this.#fullyQualifiedName}' has more than two components. This plugin will ignore it.`,\n        );\n        return undefined;\n      }\n\n      const [parent, child] = decomposed;\n\n      if (!isReferenceSchema(parent)) {\n        logger.debug(parent, 'Only reference schema allowed for parent class');\n        return undefined;\n      }\n\n      const declaration = this.#processClass(child);\n      const identifier = this.#processParentClass(parent);\n\n      return (\n        declaration &&\n        ts.factory.updateInterfaceDeclaration(\n          declaration,\n          declaration.modifiers,\n          declaration.name,\n          undefined,\n          [\n            ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n              ts.factory.createExpressionWithTypeArguments(identifier, undefined),\n            ]),\n          ],\n          declaration.members,\n        )\n      );\n    }\n\n    return this.#processClass(schema);\n  }\n\n  #processParentClass(schema: ReferenceSchema): Identifier {\n    const { imports, paths } = this.#dependencies;\n\n    const specifier = convertReferenceSchemaToSpecifier(schema);\n    const path = paths.createRelativePath(convertReferenceSchemaToPath(schema));\n\n    return imports.default.getIdentifier(path) ?? imports.default.add(path, specifier, true);\n  }\n\n  #processTypeElements({ properties }: ObjectSchema): readonly TypeElement[] {\n    return Object.entries(properties ?? {}).map(([name, schema]) => {\n      const [type] = new TypeSchemaProcessor(schema, this.#dependencies).process();\n\n      return ts.factory.createPropertySignature(\n        undefined,\n        name,\n        isNullableSchema(schema) ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined,\n        type,\n      );\n    });\n  }\n}\n"],
  "mappings": "AAAA,SAAS,eAAe;AAExB;AAAA,EAIE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAEK;AACP;AAAA,EACE;AAAA,EACA;AAAA,OACK;AACP,OAAO,sBAAsB;AAC7B,OAAO,uBAAuB;AAC9B,OAAO,iBAAiB;AACxB,OAAO;AAAA,OAMA;AACP,OAAO,yBAAyB;AAEzB,MAAM,gBAAgB;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,qBAAqB,IAAI,YAAY,EAAE,WAAW,KAAK,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,EAET,YAAY,MAAc,WAAmB,OAAe;AAC1D,SAAK,aAAa;AAClB,SAAK,SAAS;AACd,SAAK,sBAAsB;AAC3B,SAAK,QAAQ,2BAA2B,IAAI;AAC5C,SAAK,QAAQ,wCAAwC,IAAI;AACzD,SAAK,gBAAgB,IAAI,kBAAkB,IAAI,YAAY,EAAE,WAAW,OAAO,YAAY,QAAQ,KAAK,KAAK,EAAE,CAAC,CAAC;AAAA,EACnH;AAAA,EAEA,IAAI,MAAkB;AACpB,UAAM,KAAK,GAAG,QAAQ,iBAAiB,KAAK,KAAK;AAEjD,SAAK,cAAc,QAAQ,QAAQ,IAAI,EAAE;AAEzC,WAAO;AAAA,EACT;AAAA,EAEA,UAAsB;AACpB,SAAK,OAAO,OAAO,MAAM,sBAAsB,KAAK,KAAK,EAAE;AAE3D,UAAM,cAAc,aAAa,KAAK,UAAU,IAC5C,KAAK,aAAa,KAAK,UAAU,IACjC,KAAK,sBAAsB,KAAK,UAAU;AAE9C,UAAM,aAAa,cAAc,CAAC,WAAW,IAAI,CAAC;AAElD,UAAM,EAAE,SAAS,QAAQ,IAAI,KAAK;AAElC,WAAO;AAAA,MACL,CAAC,GAAG,QAAQ,OAAO,GAAG,GAAG,YAAY,GAAG,QAAQ,OAAO,CAAC;AAAA,MACxD,KAAK,mBAAmB,mBAAmB,KAAK,KAAK;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,cAAc,QAAkD;AAC9D,UAAM,EAAE,OAAO,IAAI,KAAK;AAExB,QAAI,CAAC,eAAe,MAAM,GAAG;AAC3B,aAAO,MAAM,QAAQ,gCAAgC,KAAK,mBAAmB,GAAG;AAChF,aAAO;AAAA,IACT;AAEA,QAAI,cAAc,MAAM,GAAG;AACzB,aAAO,MAAM,iCAAiC,KAAK,mBAAmB,GAAG;AAAA,IAC3E;AAEA,WAAO,GAAG,QAAQ;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,KAAK,qBAAqB,MAAsB;AAAA,IAClD;AAAA,EACF;AAAA,EAEA,aAAa,EAAE,MAAM,QAAQ,GAA0B;AACrD,WAAO,GAAG,QAAQ;AAAA,MAChB;AAAA,MACA,KAAK;AAAA,MACL,QAAQ,IAAI,CAAC,WAAW,GAAG,QAAQ,iBAAiB,QAAQ,GAAG,QAAQ,oBAAoB,MAAM,CAAC,CAAC;AAAA,IACrG;AAAA,EACF;AAAA,EAEA,sBAAsB,QAAuC;AAC3D,UAAM,EAAE,OAAO,IAAI,KAAK;AAExB,QAAI,iBAAiB,MAAM,GAAG;AAC5B,YAAM,aAAa,gBAAgB,MAAM;AAEzC,UAAI,WAAW,SAAS,GAAG;AACzB,eAAO;AAAA,UACL;AAAA,UACA,eAAe,KAAK,mBAAmB;AAAA,QACzC;AACA,eAAO;AAAA,MACT;AAEA,YAAM,CAAC,QAAQ,KAAK,IAAI;AAExB,UAAI,CAAC,kBAAkB,MAAM,GAAG;AAC9B,eAAO,MAAM,QAAQ,gDAAgD;AACrE,eAAO;AAAA,MACT;AAEA,YAAM,cAAc,KAAK,cAAc,KAAK;AAC5C,YAAM,aAAa,KAAK,oBAAoB,MAAM;AAElD,aACE,eACA,GAAG,QAAQ;AAAA,QACT;AAAA,QACA,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,UACE,GAAG,QAAQ,qBAAqB,GAAG,WAAW,gBAAgB;AAAA,YAC5D,GAAG,QAAQ,kCAAkC,YAAY,MAAS;AAAA,UACpE,CAAC;AAAA,QACH;AAAA,QACA,YAAY;AAAA,MACd;AAAA,IAEJ;AAEA,WAAO,KAAK,cAAc,MAAM;AAAA,EAClC;AAAA,EAEA,oBAAoB,QAAqC;AACvD,UAAM,EAAE,SAAS,MAAM,IAAI,KAAK;AAEhC,UAAM,YAAY,kCAAkC,MAAM;AAC1D,UAAM,OAAO,MAAM,mBAAmB,6BAA6B,MAAM,CAAC;AAE1E,WAAO,QAAQ,QAAQ,cAAc,IAAI,KAAK,QAAQ,QAAQ,IAAI,MAAM,WAAW,IAAI;AAAA,EACzF;AAAA,EAEA,qBAAqB,EAAE,WAAW,GAAyC;AACzE,WAAO,OAAO,QAAQ,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,MAAM,MAAM;AAC9D,YAAM,CAAC,IAAI,IAAI,IAAI,oBAAoB,QAAQ,KAAK,aAAa,EAAE,QAAQ;AAE3E,aAAO,GAAG,QAAQ;AAAA,QAChB;AAAA,QACA;AAAA,QACA,iBAAiB,MAAM,IAAI,GAAG,QAAQ,YAAY,GAAG,WAAW,aAAa,IAAI;AAAA,QACjF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
