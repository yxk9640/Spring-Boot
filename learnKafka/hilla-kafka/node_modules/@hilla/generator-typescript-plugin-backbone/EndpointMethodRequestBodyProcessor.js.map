{
  "version": 3,
  "sources": ["src/EndpointMethodRequestBodyProcessor.ts"],
  "sourcesContent": ["import type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport {\n  isEmptyObject,\n  isObjectSchema,\n  type NonEmptyObjectSchema,\n  type Schema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyDeep } from 'type-fest';\nimport ts, { type ObjectLiteralExpression, type ParameterDeclaration } from 'typescript';\nimport TypeSchemaProcessor from './TypeSchemaProcessor.js';\nimport { defaultMediaType } from './utils.js';\n\nexport type EndpointMethodRequestBody = ReadonlyDeep<OpenAPIV3.RequestBodyObject>;\n\nexport type EndpointMethodRequestBodyProcessingResult = Readonly<{\n  parameters: readonly ParameterDeclaration[];\n  packedParameters?: ObjectLiteralExpression;\n  initParam: ts.Identifier;\n}>;\n\nexport default class EndpointMethodRequestBodyProcessor {\n  static readonly #defaultInitParamName = 'init';\n\n  readonly #dependencies: DependencyManager;\n  readonly #owner: Plugin;\n  readonly #requestBody?: EndpointMethodRequestBody;\n  readonly #initTypeIdentifier: ts.Identifier;\n\n  constructor(\n    requestBody: ReadonlyDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.RequestBodyObject> | undefined,\n    dependencies: DependencyManager,\n    owner: Plugin,\n    initTypeIdentifier: ts.Identifier,\n  ) {\n    this.#owner = owner;\n    this.#dependencies = dependencies;\n    this.#requestBody = requestBody ? owner.resolver.resolve(requestBody) : undefined;\n    this.#initTypeIdentifier = initTypeIdentifier;\n  }\n\n  process(): EndpointMethodRequestBodyProcessingResult {\n    if (!this.#requestBody) {\n      return {\n        initParam: ts.factory.createIdentifier(EndpointMethodRequestBodyProcessor.#defaultInitParamName),\n        packedParameters: ts.factory.createObjectLiteralExpression(),\n        parameters: [\n          ts.factory.createParameterDeclaration(\n            undefined,\n            undefined,\n            EndpointMethodRequestBodyProcessor.#defaultInitParamName,\n            ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n            ts.factory.createTypeReferenceNode(this.#initTypeIdentifier),\n          ),\n        ],\n      };\n    }\n\n    const parameterData = this.#extractParameterData(this.#requestBody.content[defaultMediaType].schema);\n    const parameterNames = parameterData.map(([name]) => name);\n    let initParamName = EndpointMethodRequestBodyProcessor.#defaultInitParamName;\n\n    while (parameterNames.includes(initParamName)) {\n      initParamName = `_${initParamName}`;\n    }\n\n    return {\n      initParam: ts.factory.createIdentifier(initParamName),\n      packedParameters: ts.factory.createObjectLiteralExpression(\n        parameterData.map(([name]) => ts.factory.createShorthandPropertyAssignment(name)),\n      ),\n      parameters: [\n        ...parameterData.map(([name, schema]) => {\n          const nodes = new TypeSchemaProcessor(schema, this.#dependencies).process();\n\n          return ts.factory.createParameterDeclaration(\n            undefined,\n            undefined,\n            name,\n            undefined,\n            ts.factory.createUnionTypeNode(nodes),\n          );\n        }),\n        ts.factory.createParameterDeclaration(\n          undefined,\n          undefined,\n          initParamName,\n          ts.factory.createToken(ts.SyntaxKind.QuestionToken),\n          ts.factory.createTypeReferenceNode(this.#initTypeIdentifier),\n        ),\n      ],\n    };\n  }\n\n  #extractParameterData(\n    basicSchema?: ReadonlyDeep<OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject>,\n  ): Array<readonly [string, Schema]> {\n    if (!basicSchema) {\n      return [];\n    }\n\n    const { logger, resolver } = this.#owner;\n\n    const resolvedSchema = resolver.resolve(basicSchema);\n\n    if (isObjectSchema(resolvedSchema) && !isEmptyObject(resolvedSchema)) {\n      return Object.entries((resolvedSchema as NonEmptyObjectSchema).properties);\n    }\n\n    logger.warn(\"A schema provided for endpoint method's 'requestBody' is not supported\");\n    return [];\n  }\n}\n"],
  "mappings": "AACA;AAAA,EACE;AAAA,EACA;AAAA,OAGK;AAIP,OAAO,YAAqE;AAC5E,OAAO,yBAAyB;AAChC,SAAS,wBAAwB;AAUjC,MAAO,mCAAiD;AAAA,EACtD,OAAgB,wBAAwB;AAAA,EAE/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAET,YACE,aACA,cACA,OACA,oBACA;AACA,SAAK,SAAS;AACd,SAAK,gBAAgB;AACrB,SAAK,eAAe,cAAc,MAAM,SAAS,QAAQ,WAAW,IAAI;AACxE,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EAEA,UAAqD;AACnD,QAAI,CAAC,KAAK,cAAc;AACtB,aAAO;AAAA,QACL,WAAW,GAAG,QAAQ,iBAAiB,mCAAmC,qBAAqB;AAAA,QAC/F,kBAAkB,GAAG,QAAQ,8BAA8B;AAAA,QAC3D,YAAY;AAAA,UACV,GAAG,QAAQ;AAAA,YACT;AAAA,YACA;AAAA,YACA,mCAAmC;AAAA,YACnC,GAAG,QAAQ,YAAY,GAAG,WAAW,aAAa;AAAA,YAClD,GAAG,QAAQ,wBAAwB,KAAK,mBAAmB;AAAA,UAC7D;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,UAAM,gBAAgB,KAAK,sBAAsB,KAAK,aAAa,QAAQ,gBAAgB,EAAE,MAAM;AACnG,UAAM,iBAAiB,cAAc,IAAI,CAAC,CAAC,IAAI,MAAM,IAAI;AACzD,QAAI,gBAAgB,mCAAmC;AAEvD,WAAO,eAAe,SAAS,aAAa,GAAG;AAC7C,sBAAgB,IAAI,aAAa;AAAA,IACnC;AAEA,WAAO;AAAA,MACL,WAAW,GAAG,QAAQ,iBAAiB,aAAa;AAAA,MACpD,kBAAkB,GAAG,QAAQ;AAAA,QAC3B,cAAc,IAAI,CAAC,CAAC,IAAI,MAAM,GAAG,QAAQ,kCAAkC,IAAI,CAAC;AAAA,MAClF;AAAA,MACA,YAAY;AAAA,QACV,GAAG,cAAc,IAAI,CAAC,CAAC,MAAM,MAAM,MAAM;AACvC,gBAAM,QAAQ,IAAI,oBAAoB,QAAQ,KAAK,aAAa,EAAE,QAAQ;AAE1E,iBAAO,GAAG,QAAQ;AAAA,YAChB;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,GAAG,QAAQ,oBAAoB,KAAK;AAAA,UACtC;AAAA,QACF,CAAC;AAAA,QACD,GAAG,QAAQ;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA,GAAG,QAAQ,YAAY,GAAG,WAAW,aAAa;AAAA,UAClD,GAAG,QAAQ,wBAAwB,KAAK,mBAAmB;AAAA,QAC7D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,sBACE,aACkC;AAClC,QAAI,CAAC,aAAa;AAChB,aAAO,CAAC;AAAA,IACV;AAEA,UAAM,EAAE,QAAQ,SAAS,IAAI,KAAK;AAElC,UAAM,iBAAiB,SAAS,QAAQ,WAAW;AAEnD,QAAI,eAAe,cAAc,KAAK,CAAC,cAAc,cAAc,GAAG;AACpE,aAAO,OAAO,QAAS,eAAwC,UAAU;AAAA,IAC3E;AAEA,WAAO,KAAK,wEAAwE;AACpF,WAAO,CAAC;AAAA,EACV;AACF;",
  "names": []
}
