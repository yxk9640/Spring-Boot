{
  "version": 3,
  "sources": ["src/EndpointMethodOperationProcessor.ts"],
  "sourcesContent": ["/* eslint-disable max-params */\nimport type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport ClientPlugin from '@hilla/generator-typescript-plugin-client';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport equal from 'fast-deep-equal';\nimport { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyDeep } from 'type-fest';\nimport ts, { type Expression, type Statement, type TypeNode } from 'typescript';\nimport EndpointMethodRequestBodyProcessor from './EndpointMethodRequestBodyProcessor.js';\nimport EndpointMethodResponseProcessor from './EndpointMethodResponseProcessor.js';\n\nexport type EndpointMethodOperation = ReadonlyDeep<OpenAPIV3.OperationObject>;\n\nexport const INIT_TYPE_NAME = 'EndpointRequestInit';\nexport const HILLA_FRONTEND_NAME = '@hilla/frontend';\n\nexport default abstract class EndpointMethodOperationProcessor {\n  static createProcessor(\n    httpMethod: OpenAPIV3.HttpMethods,\n    endpointName: string,\n    endpointMethodName: string,\n    operation: EndpointMethodOperation,\n    dependencies: DependencyManager,\n    owner: Plugin,\n  ): EndpointMethodOperationProcessor | undefined {\n    switch (httpMethod) {\n      case OpenAPIV3.HttpMethods.POST:\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new EndpointMethodOperationPOSTProcessor(\n          endpointName,\n          endpointMethodName,\n          operation,\n          dependencies,\n          owner,\n        );\n      default:\n        owner.logger.warn(`Processing ${httpMethod.toUpperCase()} currently is not supported`);\n        return undefined;\n    }\n  }\n\n  abstract process(outputDir?: string): Promise<Statement | undefined>;\n}\n\nclass EndpointMethodOperationPOSTProcessor extends EndpointMethodOperationProcessor {\n  readonly #dependencies: DependencyManager;\n  readonly #endpointMethodName: string;\n  readonly #endpointName: string;\n  readonly #operation: EndpointMethodOperation;\n  readonly #owner: Plugin;\n\n  constructor(\n    endpointName: string,\n    endpointMethodName: string,\n    operation: EndpointMethodOperation,\n    dependencies: DependencyManager,\n    owner: Plugin,\n  ) {\n    super();\n    this.#owner = owner;\n    this.#dependencies = dependencies;\n    this.#endpointName = endpointName;\n    this.#endpointMethodName = endpointMethodName;\n    this.#operation = operation;\n  }\n\n  async process(outputDir?: string): Promise<Statement | undefined> {\n    const { exports, imports, paths } = this.#dependencies;\n    this.#owner.logger.debug(`${this.#endpointName}.${this.#endpointMethodName} - processing POST method`);\n    const initTypeIdentifier = imports.named.getIdentifier(\n      paths.createBareModulePath(HILLA_FRONTEND_NAME),\n      INIT_TYPE_NAME,\n    )!;\n\n    const { initParam, packedParameters, parameters } = new EndpointMethodRequestBodyProcessor(\n      this.#operation.requestBody,\n      this.#dependencies,\n      this.#owner,\n      initTypeIdentifier,\n    ).process();\n\n    const methodIdentifier = exports.named.add(this.#endpointMethodName);\n    const clientLibIdentifier = imports.default.getIdentifier(\n      paths.createRelativePath(await ClientPlugin.getClientFileName(outputDir)),\n    )!;\n\n    const callExpression = ts.factory.createCallExpression(\n      ts.factory.createPropertyAccessExpression(clientLibIdentifier, ts.factory.createIdentifier('call')),\n      undefined,\n      [\n        ts.factory.createStringLiteral(this.#endpointName),\n        ts.factory.createStringLiteral(this.#endpointMethodName),\n        packedParameters,\n        initParam,\n      ].filter(Boolean) as readonly Expression[],\n    );\n\n    const responseType = this.#prepareResponseType();\n\n    return ts.factory.createFunctionDeclaration(\n      [ts.factory.createToken(ts.SyntaxKind.AsyncKeyword)],\n      undefined,\n      methodIdentifier,\n      undefined,\n      parameters,\n      ts.factory.createTypeReferenceNode('Promise', [responseType]),\n      ts.factory.createBlock([ts.factory.createReturnStatement(callExpression)]),\n    );\n  }\n\n  #prepareResponseType(): TypeNode {\n    this.#owner.logger.debug(`${this.#endpointName}.${this.#endpointMethodName} POST - processing response type`);\n\n    const responseTypes = Object.entries(this.#operation.responses)\n      .flatMap(([code, response]) =>\n        new EndpointMethodResponseProcessor(code, response, this.#dependencies, this.#owner).process(),\n      )\n      .filter((value, index, arr) => arr.findIndex((v) => equal(v, value)) === index);\n\n    if (responseTypes.length === 0) {\n      return ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword);\n    }\n\n    return ts.factory.createUnionTypeNode(responseTypes);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
