{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport type { ReferenceSchema } from '@hilla/generator-typescript-core/Schema.js';\nimport type SharedStorage from '@hilla/generator-typescript-core/SharedStorage.js';\nimport { convertFullyQualifiedNameToRelativePath } from '@hilla/generator-typescript-core/utils.js';\nimport { ModelFixProcessor } from './ModelFixProcessor.js';\nimport { SubTypesProcessor } from './SubTypesProcessor.js';\nimport { TypeFixProcessor } from './TypeFixProcessor.js';\n\nexport default class SubTypesPlugin extends Plugin {\n  declare ['constructor']: typeof SubTypesPlugin;\n\n  override get path(): string {\n    return import.meta.url;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async execute(storage: SharedStorage): Promise<void> {\n    const { api, sources } = storage;\n\n    const components = api.components?.schemas;\n\n    if (!components) {\n      return;\n    }\n\n    Object.entries(components).forEach(([baseKey, baseComponent]) => {\n      // search for components with oneOf: those are union types\n      if ('oneOf' in baseComponent && Array.isArray(baseComponent.oneOf)) {\n        const fn = `${convertFullyQualifiedNameToRelativePath(baseKey)}.ts`;\n        const source = sources.find(({ fileName }) => fileName === fn)!;\n        // replace the (empty) source with a newly-generated one\n        const newSource = new SubTypesProcessor(baseKey, source, baseComponent.oneOf).process();\n        sources.splice(sources.indexOf(source), 1, newSource);\n\n        // mentioned types in the oneOf need to be fixed as well\n        baseComponent.oneOf.forEach((schema) => {\n          if ('$ref' in schema) {\n            const path = (schema as ReferenceSchema).$ref;\n            Object.entries(components).forEach(([subKey, subComponent]) => {\n              if ('anyOf' in subComponent && subKey === path.substring('#/components/schemas/'.length)) {\n                subComponent.anyOf?.forEach((s) => {\n                  if ('properties' in s && '@type' in s.properties! && 'example' in s.properties['@type']) {\n                    const typeValue = s.properties['@type'].example as string;\n                    const subFn = `${convertFullyQualifiedNameToRelativePath(subKey)}.ts`;\n                    const subSource = sources.find(({ fileName }) => fileName === subFn)!;\n                    // fix the source to replace the @type property name with a quoted string\n                    const fixedSource = new TypeFixProcessor(subSource, typeValue).process();\n                    sources.splice(sources.indexOf(subSource), 1, fixedSource);\n\n                    // fix the model to remove the @type property\n                    const modelFn = `${convertFullyQualifiedNameToRelativePath(subKey)}Model.ts`;\n                    const modelSource = sources.find(({ fileName }) => fileName === modelFn)!;\n                    const fixedModelSource = new ModelFixProcessor(modelSource).process();\n                    sources.splice(sources.indexOf(modelSource), 1, fixedModelSource);\n                  }\n                });\n              }\n            });\n          }\n        });\n\n        // remove the union type model file\n        const unionFn = `${convertFullyQualifiedNameToRelativePath(baseKey)}Model.ts`;\n        const unionSource = sources.find(({ fileName }) => fileName === unionFn)!;\n        sources.splice(sources.indexOf(unionSource), 1);\n      }\n    });\n  }\n}\n"]}