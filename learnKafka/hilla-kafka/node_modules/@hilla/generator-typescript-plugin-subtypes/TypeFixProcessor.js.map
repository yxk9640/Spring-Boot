{"version":3,"file":"TypeFixProcessor.js","sourceRoot":"","sources":["src/TypeFixProcessor.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,uDAAuD,CAAC;AACrF,OAAO,EAAE,MAAM,YAAY,CAAC;AAE5B,SAAS,oBAAoB,CAAC,IAAqB;IACjD,IAAI,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;QACnF,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,OAAO,gBAAgB;IAClB,OAAO,CAAgB;IACvB,UAAU,CAAS;IAE5B,YAAY,MAAqB,EAAE,SAAiB;QAClD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,OAAO;QACL,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YAC3D,qCAAqC;YACrC,IAAI,EAAE,CAAC,sBAAsB,CAAC,SAAS,CAAC,EAAE,CAAC;gBACzC,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;oBAC/C,oEAAoE;oBACpE,IAAI,EAAE,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,OAAO,EAAE,CAAC;wBACpF,OAAO,EAAE,CAAC,OAAO,CAAC,uBAAuB,CACvC,SAAS,EACT,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,EACvC,SAAS,EACT,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAClF,CAAC;oBACJ,CAAC;oBAED,OAAO,MAAM,CAAC;gBAChB,CAAC,CAAC,CAAC;gBAEH,OAAO,EAAE,CAAC,OAAO,CAAC,0BAA0B,CAC1C,SAAS,CAAC,SAAS,EACnB,SAAS,CAAC,IAAI,EACd,SAAS,CAAC,cAAc,EACxB,SAAS,CAAC,eAAe,EACzB,OAAO,CACR,CAAC;YACJ,CAAC;YAED,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,OAAO,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAC;CACF","sourcesContent":["import createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport ts from 'typescript';\n\nfunction propertyNameToString(node: ts.PropertyName): string | null {\n  if (ts.isIdentifier(node) || ts.isStringLiteral(node) || ts.isNumericLiteral(node)) {\n    return node.text;\n  }\n  return null;\n}\n\nexport class TypeFixProcessor {\n  readonly #source: ts.SourceFile;\n  readonly #typeValue: string;\n\n  constructor(source: ts.SourceFile, typeValue: string) {\n    this.#source = source;\n    this.#typeValue = typeValue;\n  }\n\n  process(): ts.SourceFile {\n    const statements = this.#source.statements.map((statement) => {\n      // search in the interface definition\n      if (ts.isInterfaceDeclaration(statement)) {\n        const members = statement.members.map((member) => {\n          // search for the @type property and replace it with a quoted string\n          if (ts.isPropertySignature(member) && propertyNameToString(member.name) === '@type') {\n            return ts.factory.createPropertySignature(\n              undefined,\n              ts.factory.createStringLiteral('@type'),\n              undefined,\n              ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(this.#typeValue)),\n            );\n          }\n\n          return member;\n        });\n\n        return ts.factory.createInterfaceDeclaration(\n          statement.modifiers,\n          statement.name,\n          statement.typeParameters,\n          statement.heritageClauses,\n          members,\n        );\n      }\n\n      return statement;\n    });\n\n    return createSourceFile(statements, this.#source.fileName);\n  }\n}\n"]}