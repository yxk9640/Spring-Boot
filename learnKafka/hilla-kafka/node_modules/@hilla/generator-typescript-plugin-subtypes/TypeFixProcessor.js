import createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';
import ts from 'typescript';
function propertyNameToString(node) {
    if (ts.isIdentifier(node) || ts.isStringLiteral(node) || ts.isNumericLiteral(node)) {
        return node.text;
    }
    return null;
}
export class TypeFixProcessor {
    #source;
    #typeValue;
    constructor(source, typeValue) {
        this.#source = source;
        this.#typeValue = typeValue;
    }
    process() {
        const statements = this.#source.statements.map((statement) => {
            // search in the interface definition
            if (ts.isInterfaceDeclaration(statement)) {
                const members = statement.members.map((member) => {
                    // search for the @type property and replace it with a quoted string
                    if (ts.isPropertySignature(member) && propertyNameToString(member.name) === '@type') {
                        return ts.factory.createPropertySignature(undefined, ts.factory.createStringLiteral('@type'), undefined, ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(this.#typeValue)));
                    }
                    return member;
                });
                return ts.factory.createInterfaceDeclaration(statement.modifiers, statement.name, statement.typeParameters, statement.heritageClauses, members);
            }
            return statement;
        });
        return createSourceFile(statements, this.#source.fileName);
    }
}
//# sourceMappingURL=TypeFixProcessor.js.map