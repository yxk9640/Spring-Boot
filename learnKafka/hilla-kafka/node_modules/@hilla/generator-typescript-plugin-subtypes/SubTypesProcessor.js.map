{"version":3,"file":"SubTypesProcessor.js","sourceRoot":"","sources":["src/SubTypesProcessor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EACL,4BAA4B,EAC5B,iCAAiC,GAElC,MAAM,4CAA4C,CAAC;AACpD,OAAO,EAAE,0BAA0B,EAAE,MAAM,2CAA2C,CAAC;AACvF,OAAO,gBAAgB,MAAM,uDAAuD,CAAC;AACrF,OAAO,iBAAiB,MAAM,qEAAqE,CAAC;AACpG,OAAO,WAAW,MAAM,+DAA+D,CAAC;AACxF,OAAO,EAAE,MAAM,YAAY,CAAC;AAE5B,MAAM,OAAO,iBAAiB;IACnB,SAAS,CAAS;IAClB,OAAO,CAAgB;IACvB,MAAM,CAAoB;IAC1B,aAAa,CAAC;IAEvB,YAAY,QAAgB,EAAE,MAAqB,EAAE,KAAwB;QAC3E,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,IAAI,iBAAiB,CACxC,IAAI,WAAW,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAC5E,CAAC;IACJ,CAAC;IAED,OAAO;QACL,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;QAEvD,uCAAuC;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5E,MAAM,OAAO,GAAG,iCAAiC,CAAC,MAAM,CAAC,CAAC;YAC1D,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,yCAAyC;QACzC,MAAM,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAC1C,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,CACvE,CAAC;QAEF,uBAAuB;QACvB,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAC9C,MAAM,aAAa,GAAG,GAAG,0BAA0B,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QACtE,MAAM,eAAe,GAAG,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACnE,MAAM,SAAS,GAAG,EAAE,CAAC,OAAO,CAAC,0BAA0B,CAAC,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;QAEtG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAEnC,OAAO,gBAAgB,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,GAAG,UAAU,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC1G,CAAC;CACF","sourcesContent":["import { dirname } from 'path/posix';\nimport {\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  type ReferenceSchema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport { simplifyFullyQualifiedName } from '@hilla/generator-typescript-core/utils.js';\nimport createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';\nimport ts from 'typescript';\n\nexport class SubTypesProcessor {\n  readonly #typeName: string;\n  readonly #source: ts.SourceFile;\n  readonly #oneOf: ReferenceSchema[];\n  readonly #dependencies;\n\n  constructor(typeName: string, source: ts.SourceFile, oneOf: ReferenceSchema[]) {\n    this.#typeName = typeName;\n    this.#source = source;\n    this.#oneOf = oneOf;\n    this.#dependencies = new DependencyManager(\n      new PathManager({ extension: '.js', relativeTo: dirname(source.fileName) }),\n    );\n  }\n\n  process(): ts.SourceFile {\n    const { exports, imports, paths } = this.#dependencies;\n\n    // import all sub types and return them\n    const subTypes = this.#oneOf.map((schema) => {\n      const path = paths.createRelativePath(convertReferenceSchemaToPath(schema));\n      const subType = convertReferenceSchemaToSpecifier(schema);\n      return imports.default.add(path, subType, true);\n    });\n\n    // create a union type from the sub types\n    const union = ts.factory.createUnionTypeNode(\n      subTypes.map((subType) => ts.factory.createTypeReferenceNode(subType)),\n    );\n\n    // create the statement\n    const { fileName, statements } = this.#source;\n    const unionTypeName = `${simplifyFullyQualifiedName(this.#typeName)}`;\n    const unionIdentifier = ts.factory.createIdentifier(unionTypeName);\n    const statement = ts.factory.createTypeAliasDeclaration(undefined, unionIdentifier, undefined, union);\n\n    exports.default.set(unionTypeName);\n\n    return createSourceFile([...imports.toCode(), ...statements, statement, ...exports.toCode()], fileName);\n  }\n}\n"]}