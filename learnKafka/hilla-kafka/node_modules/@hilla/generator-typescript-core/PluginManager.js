class PluginManager {
  #plugins;
  constructor(plugins, resolver, logger) {
    const standardPlugins = [
      "BackbonePlugin",
      "ClientPlugin",
      "BarrelPlugin",
      "ModelPlugin",
      "PushPlugin",
      "SubTypesPlugin"
    ];
    const customPlugins = plugins.filter((p) => !standardPlugins.includes(p.name));
    if (customPlugins.length > 0) {
      logger.global.info(`Plugins: ${plugins.map(({ name }) => name).join(", ")}`);
    }
    this.#plugins = plugins.map((PluginClass) => new PluginClass(resolver, logger));
  }
  async execute(storage) {
    for (const plugin of this.#plugins) {
      const { name, path } = plugin;
      plugin.logger.debug({ plugin: { name, path } }, `Executing plugin '${plugin.name}'`);
      await plugin.execute(storage);
    }
  }
}
export {
  PluginManager as default
};
//# sourceMappingURL=PluginManager.js.map
