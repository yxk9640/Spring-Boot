{
  "version": 3,
  "sources": ["src/GeneratorIO.ts"],
  "sourcesContent": ["import { constants } from 'node:fs';\nimport { access, mkdir, readFile, rm, writeFile } from 'node:fs/promises';\nimport { createRequire } from 'node:module';\nimport { dirname, isAbsolute, join, resolve } from 'node:path';\nimport { pathToFileURL } from 'node:url';\nimport type File from '@hilla/generator-typescript-core/File.js';\nimport Plugin, { type PluginConstructor } from '@hilla/generator-typescript-core/Plugin.js';\nimport type LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport GeneratorIOException from './GeneratorIOException.js';\n\nconst require = createRequire(import.meta.url);\n\ntype PluginConstructorModule = Readonly<{\n  default: PluginConstructor;\n}>;\n\nexport default class GeneratorIO {\n  static readonly INDEX_FILENAME = 'generated-file-list.txt';\n  declare ['constructor']: typeof GeneratorIO;\n  readonly cwd: string;\n  readonly #logger: LoggerFactory;\n  readonly #outputDir: string;\n\n  constructor(outputDir: string, logger: LoggerFactory) {\n    this.cwd = process.cwd();\n    this.#outputDir = isAbsolute(outputDir) ? outputDir : resolve(this.cwd, outputDir);\n    this.#logger = logger;\n\n    logger.global.debug(`Output directory: ${this.#outputDir}`);\n  }\n\n  /**\n   * Gets the list of files generated the last time. The info is found in {@link INDEX_FILENAME}.\n   * @returns a list of files that have been generated by us\n   */\n  async getGeneratedFiles(): Promise<Set<string>> {\n    const files = new Set<string>();\n    try {\n      const indexFileContents = await this.read(this.resolveGeneratedFile(this.constructor.INDEX_FILENAME));\n      indexFileContents\n        .split('\\n')\n        .filter((n) => n.length)\n        .forEach((fileName) => files.add(fileName));\n    } catch (e) {\n      // non-existing file is OK, all other errors must be rethrown\n      if (!(e instanceof Error && 'code' in e && e.code === 'ENOENT')) {\n        throw e;\n      }\n    }\n    return files;\n  }\n\n  /**\n   * Cleans the output directory by keeping the generated files and deleting the rest of the given files.\n   *\n   * @returns a set containing deleted filenames\n   */\n  async cleanOutputDir(generatedFiles: string[], filesToDelete: Set<string>): Promise<Set<string>> {\n    this.#logger.global.debug(`Cleaning ${this.#outputDir}`);\n    await mkdir(this.#outputDir, { recursive: true });\n\n    generatedFiles.forEach((filename) => {\n      this.#logger.global.debug(`File ${filename} was re-written, should not delete it`);\n      filesToDelete.delete(filename);\n    });\n\n    const deletedFiles = new Set(\n      await Promise.all(\n        [...filesToDelete].map(async (filename) => {\n          const resolved = this.resolveGeneratedFile(filename);\n          if (await this.exists(resolved)) {\n            this.#logger.global.debug(`Deleting file ${filename}.`);\n            await rm(resolved);\n          }\n          return filename;\n        }),\n      ),\n    );\n\n    return deletedFiles;\n  }\n\n  async createFileIndex(filenames: string[]): Promise<void> {\n    await this.write(this.constructor.INDEX_FILENAME, filenames.join('\\n'));\n  }\n\n  async writeGeneratedFiles(files: readonly File[]): Promise<string[]> {\n    await this.createFileIndex(files.map((file) => file.name));\n    this.#logger.global.debug(`created index`);\n\n    return Promise.all(\n      files.map(async (file) => {\n        const newFileContent = await file.text();\n        let oldFileContent;\n        try {\n          oldFileContent = await this.read(this.resolveGeneratedFile(file.name));\n        } catch (_e) {}\n\n        if (newFileContent !== oldFileContent) {\n          this.#logger.global.debug(`writing file ${file.name}`);\n          await this.write(file.name, await file.text());\n        } else {\n          this.#logger.global.debug(`File ${file.name} stayed the same`);\n        }\n        return file.name;\n      }),\n    );\n  }\n\n  /**\n   * Checks that a file exists (is visible)\n   * @param path - the file path to check\n   */\n  // eslint-disable-next-line class-methods-use-this\n  async exists(path: string): Promise<boolean> {\n    try {\n      await access(path, constants.F_OK);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async loadPlugin(modulePath: string): Promise<PluginConstructor> {\n    this.#logger.global.debug(`Loading plugin: ${modulePath}`);\n    const module: PluginConstructorModule = await import(pathToFileURL(require.resolve(modulePath)).toString());\n    const ctr: PluginConstructor = module.default;\n\n    if (!Object.prototype.isPrototypeOf.call(Plugin, ctr)) {\n      throw new GeneratorIOException(`Plugin '${modulePath}' is not an instance of a Plugin class`);\n    }\n\n    return ctr;\n  }\n\n  resolveGeneratedFile(filename: string): string {\n    return resolve(this.#outputDir, filename);\n  }\n\n  async read(path: string): Promise<string> {\n    this.#logger.global.debug(`Reading file: ${path}`);\n    return readFile(path, 'utf8');\n  }\n\n  async write(filename: string, content: string): Promise<void> {\n    const filePath = join(this.#outputDir, filename);\n    this.#logger.global.debug(`Writing file ${filePath}.`);\n    const dir = dirname(filePath);\n    await mkdir(dir, { recursive: true });\n    return writeFile(filePath, content, 'utf-8');\n  }\n}\n"],
  "mappings": "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",
  "names": ["require"]
}
